<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wangez-Blog</title>
  
  
  <link href="https://wangenze267.github.io/atom.xml" rel="self"/>
  
  <link href="https://wangenze267.github.io/"/>
  <updated>2021-10-17T14:50:34.881Z</updated>
  <id>https://wangenze267.github.io/</id>
  
  <author>
    <name>Ned</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue3旅途中的一些小知识</title>
    <link href="https://wangenze267.github.io/posts/809095630.html/"/>
    <id>https://wangenze267.github.io/posts/809095630.html/</id>
    <published>2021-10-17T14:42:19.000Z</published>
    <updated>2021-10-17T14:50:34.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在学习Vue3跟用node koa写后端，此篇文章是记录一些平时学习中的小知识点，未经整理，以后或许会整理一下。</p><blockquote><p>很乱，但有很多都是当时最直接的想法</p><p>整理后也会在此挂上新链接的</p><p>还会一直更新</p></blockquote><h2 id="路由跳转的三种方式"><a href="#路由跳转的三种方式" class="headerlink" title="路由跳转的三种方式"></a>路由跳转的三种方式</h2><h3 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to&quot;/login&quot;&gt;去登陆&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h3 id="传统跳转（options-API）"><a href="#传统跳转（options-API）" class="headerlink" title="传统跳转（options API）"></a>传统跳转（options API）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;el-button @click=&quot;goLogin&quot;&gt;去登陆&lt;/el-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">        name:&#x27;home&#x27;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            goLogin()&#123;</span><br><span class="line">this.$router.push(&#x27;/login&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Composition-API跳转"><a href="#Composition-API跳转" class="headerlink" title="Composition API跳转"></a>Composition API跳转</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line">let router = userRouter()</span><br><span class="line">const goLogin = ()=&gt;&#123;</span><br><span class="line">    router.push(&#x27;/login&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：setup是钩子函数，如果像第三个例子写的话，里面的函数都属于钩子范畴，可以像第二种方式那样，setup类似于methods，完后将它return出去应该也是可以的。</strong></p><h3 id="下面为上面注意中，方法的实现代码"><a href="#下面为上面注意中，方法的实现代码" class="headerlink" title="下面为上面注意中，方法的实现代码"></a>下面为上面注意中，方法的实现代码</h3><p><strong>大体上还是options API的写法，只是setup的思想属于composition API范畴，应该属于框架迁移过程中的写法吧</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-button @click=&quot;goLogin&quot;&gt;去登陆&lt;/el-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line">export default&#123;</span><br><span class="line">  setup()&#123;</span><br><span class="line">    let router = useRouter()</span><br><span class="line">    function goLogin()&#123;</span><br><span class="line">      router.push(&#x27;./login&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123; goLogin &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="封装两种习惯使用request"><a href="#封装两种习惯使用request" class="headerlink" title="封装两种习惯使用request"></a>封装两种习惯使用request</h2><h3 id="this-request-obj"><a href="#this-request-obj" class="headerlink" title="this.$request({ obj })"></a>this.$request({ obj })</h3><p>将参数用一个对象的方式进行解构。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$request(&#123;</span><br><span class="line">      <span class="attr">methods</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;Ned&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p><strong>封装如下</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * axios二次封装</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;./../config&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./../router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ElMessage &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TOKEN_INVALID = <span class="string">&#x27;Token认证失败，请从新登陆&#x27;</span></span><br><span class="line"><span class="keyword">const</span> NETWORK_ERROR = <span class="string">&#x27;网络请求异常，请稍后重试&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建axios实例对象，添加全局配置</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">     <span class="attr">baseURL</span>:config.baseApi,</span><br><span class="line">     <span class="attr">timeout</span>:<span class="number">8000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">service.interceptors.request.use(<span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// to do</span></span><br><span class="line">    <span class="keyword">const</span> headers = req.headers</span><br><span class="line">    <span class="keyword">if</span>(!headers.Authorization) headers.Authorization = <span class="string">&#x27;Bear token&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> req</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.interceptors.response.use(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// to do</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注意状态码一共有两个</span></span><br><span class="line"><span class="comment">     * 一为http状态码</span></span><br><span class="line"><span class="comment">     * 二为接口返回状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> &#123; code, data, msg &#125; = res.data</span><br><span class="line">    <span class="keyword">if</span>(code === <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(code === <span class="number">40001</span>)&#123;</span><br><span class="line">        ElMessage.error(TOKEN_INVALID)</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            router.push(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        &#125;, <span class="number">15000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(TOKEN_INVALID)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ElMessage.error(msg || NETWORK_ERROR)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(msg || NETWORK_ERROR)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求核心函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>options  请求配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 判断get/post</span></span><br><span class="line">    options.method = options.method || <span class="string">&#x27;get&#x27;</span></span><br><span class="line">    <span class="comment">// 防止有时候写了GET</span></span><br><span class="line">    <span class="keyword">if</span>(options.method.toLowerCase() === <span class="string">&#x27;get&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">// 如果是get就将data直接赋值给params</span></span><br><span class="line">        <span class="comment">// 类型转换</span></span><br><span class="line">        options.params = options.data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(config.env === <span class="string">&#x27;prod&#x27;</span>)&#123;</span><br><span class="line">        service.defaults.baseURL = config.baseApi</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        service.defaults.baseURL = config.mock ? config.mockApi:config.baseApi</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> service(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request</span><br></pre></td></tr></table></figure><h3 id="this-request-get-post-‘-api’-obj"><a href="#this-request-get-post-‘-api’-obj" class="headerlink" title="this.$request.get/post(‘/api’,{ obj })"></a>this.$request.get/post(‘/api’,{ obj })</h3><p>将get/post用.的方式取出，一个参数是接口路径，另一个参数是数据对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$request.get(<span class="string">&#x27;/login&#x27;</span>,&#123;<span class="attr">name</span>:Ned&#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>在上一步的封装上，支持这种习惯</p><p><strong>增加如下：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;put&#x27;</span>,<span class="string">&#x27;delete&#x27;</span>,<span class="string">&#x27;patch&#x27;</span>].forEach(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">    request[item] = <span class="function">(<span class="params">url,data,options</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request(&#123;</span><br><span class="line">            url,</span><br><span class="line">            data,</span><br><span class="line">            <span class="attr">method</span>:item,</span><br><span class="line">            ...options</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="什么时候用到"><a href="#什么时候用到" class="headerlink" title="什么时候用到"></a>什么时候用到</h3><p>开发环境：mock地址</p><p>测试环境：测试接口的地址</p><p>部署环境：线上接口的地址</p><h3 id="mock的重要性"><a href="#mock的重要性" class="headerlink" title="mock的重要性"></a>mock的重要性</h3><p>前后端分离的时候，mock可以帮助前端利用接口文档测试接口。</p><p>帮助前端完成开发</p><h3 id="配置config"><a href="#配置config" class="headerlink" title="配置config"></a>配置config</h3><p>默认是生产环境 prod，如果有值就赋值到env变量上，当做当前的环境变量。</p><p>最后将EnvConfig以解构的方式导出，方便根据当前环境直接调取两种Api</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> env = <span class="keyword">import</span>.meta.env.MODE || <span class="string">&#x27;prod&#x27;</span></span><br><span class="line"><span class="keyword">const</span> EnvConfig = &#123;</span><br><span class="line">    <span class="attr">dev</span>:&#123;</span><br><span class="line">        <span class="attr">baseApi</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">mockApi</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">test</span>:&#123;</span><br><span class="line">        <span class="attr">baseApi</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">mockApi</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">prod</span>:&#123;</span><br><span class="line">        <span class="attr">baseApi</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">mockApi</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">env</span>:env,</span><br><span class="line">    <span class="attr">mock</span>:<span class="literal">true</span>,</span><br><span class="line">    ...EnvConfig[env]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于Storage使用场景"><a href="#关于Storage使用场景" class="headerlink" title="关于Storage使用场景"></a>关于Storage使用场景</h2><h3 id="jwt-token"><a href="#jwt-token" class="headerlink" title="jwt token"></a>jwt token</h3><p>在登陆时候，有一个状态，以及用token做一些权限、由访问权限等</p><h3 id="跨组件数据共享"><a href="#跨组件数据共享" class="headerlink" title="跨组件数据共享"></a>跨组件数据共享</h3><blockquote><p>跨组件数据共享：</p><p>​    Vue中使用Vuex</p><p>​    React中使用Redux</p></blockquote><p>存在问题：页面刷新后数据丢失</p><p>原因：Vuex存储数据在js内存中，刷新会销毁内存。</p><p>解决方案：Vuex+storage结合去做</p><h3 id="storage存储"><a href="#storage存储" class="headerlink" title="storage存储"></a>storage存储</h3><p>storage存储量：4M</p><p>cookie存储量：2K-4K</p><h3 id="封装storage"><a href="#封装storage" class="headerlink" title="封装storage"></a>封装storage</h3><ul><li>setItem()</li><li>getItem()</li><li>clearItem()</li><li>clearAll()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;./../config&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">setItem</span>(<span class="params">key,val</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> storage = <span class="built_in">this</span>.getStorage()</span><br><span class="line">        storage[key] = val</span><br><span class="line">        <span class="built_in">window</span>.localStorage.setItem(config.namespace,<span class="built_in">JSON</span>.stringify(storage))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">getItem</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getStorage()[key]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">getStorage</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span>  <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(config.namespace)) || <span class="string">&quot;&#123;&#125;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">clearItem</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> storage = <span class="built_in">this</span>.getStorage()</span><br><span class="line">        <span class="keyword">delete</span> storage[key]</span><br><span class="line">        <span class="built_in">window</span>.localStorage.setItem(config.namespace,<span class="built_in">JSON</span>.stringify(storage))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">clearAll</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.localStorage.clear()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用koa初始化项目"><a href="#使用koa初始化项目" class="headerlink" title="使用koa初始化项目"></a>使用koa初始化项目</h2><h3 id="koa-generator快速生成koa服务的脚手架工具"><a href="#koa-generator快速生成koa服务的脚手架工具" class="headerlink" title="koa-generator快速生成koa服务的脚手架工具"></a>koa-generator快速生成koa服务的脚手架工具</h3><blockquote><p>1.1 全局安装脚手架工具</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g koa-generator </span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span> </span><br><span class="line">yarn global add koa-generator </span><br></pre></td></tr></table></figure><blockquote><p>1.2 进入到项目文件夹目录,执行生成命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> koa2+项目名</span></span><br><span class="line">koa2 manager-server</span><br></pre></td></tr></table></figure><blockquote><p>如果无法使用koa2命令，说明需要配置环境变量，window用户，需要找到koa-generator的安装目录，找到里面bin下面的koa2命令文件，然后配置到环境变量中。mac用户可直接创建软连接，指向到/usr/local/bin中，比如：ln -s /Users/Jack/.config/yarn/global/node_modules/koa-generator/bin/koa2 /usr/local/bin/koa2</p></blockquote><blockquote><p>1.3 安装依赖</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install </span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">cnpm install</span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">yarn</span><br></pre></td></tr></table></figure><h2 id="使用pm2部署Koa项目并实现启动、关闭、自动重启"><a href="#使用pm2部署Koa项目并实现启动、关闭、自动重启" class="headerlink" title="使用pm2部署Koa项目并实现启动、关闭、自动重启"></a>使用pm2部署Koa项目并实现启动、关闭、自动重启</h2><h3 id="1-全局安装"><a href="#1-全局安装" class="headerlink" title="1. 全局安装"></a><strong>1. 全局安装</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure><h3 id="2-启动项目"><a href="#2-启动项目" class="headerlink" title="2. 启动项目"></a><strong>2. 启动项目</strong></h3><blockquote><p>进入项目目录，然后使用pm2启动项目。这里要特别注意：启动<strong>单文件</strong>时用（app.js是项目文件名）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app.js       #启动单文件</span><br></pre></td></tr></table></figure><blockquote><p>但是在koa2中需要这样启动：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start ./bin/www #启动koa2项目</span><br></pre></td></tr></table></figure><h3 id="3-pm2自动重启"><a href="#3-pm2自动重启" class="headerlink" title="3. pm2自动重启"></a><strong>3. pm2自动重启</strong></h3><blockquote><p>把pm2的服务先停下,然后起来的时候带上–watch就可以了</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start ./bin/www --watch</span><br></pre></td></tr></table></figure><h3 id="4-启动完成，可以访问了"><a href="#4-启动完成，可以访问了" class="headerlink" title="4. 启动完成，可以访问了"></a><strong>4. 启动完成，可以访问了</strong></h3><p><img src="https://segmentfault.com/img/bVbGHD3" alt="pm2启动成功"></p><h3 id="5-pm2相关命令-www是项目名"><a href="#5-pm2相关命令-www是项目名" class="headerlink" title="5. pm2相关命令(www是项目名)"></a><strong>5. pm2相关命令(www是项目名)</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pm2 list           #查看所用已启动项目</span><br><span class="line">pm2 start          #启动</span><br><span class="line">pm2 restart www    #重启</span><br><span class="line">pm2 stop www       #停止</span><br><span class="line">pm2 delete www     #删除</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在学习Vue3跟用node koa写后端，此篇文章是记录一些平时学习中的小知识点，未经整理，以后或许会整理一下。&lt;/p&gt;
&lt;blockq</summary>
      
    
    
    
    
    <category term="Vue" scheme="https://wangenze267.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>一张图让我重学了函数表达式和函数声明</title>
    <link href="https://wangenze267.github.io/posts/1248388575.html/"/>
    <id>https://wangenze267.github.io/posts/1248388575.html/</id>
    <published>2021-10-12T09:45:00.000Z</published>
    <updated>2021-10-12T09:49:13.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天下午，在我们微信群里，学弟突然发出来这样一个图：<br><img src="/posts/1248388575.html/1.webp"></p><p>我点开一看，这不是函数声明跟函数表达式的知识点吗？前一阵子还看过相关文章。</p><p>看了几眼，我说到：<strong>第一个输出应该是最后的函数声明</strong></p><span id="more"></span><p>然后呢？ 没有然后了，真的，犹豫代表着此时的我不会。</p><blockquote><p>看来卷的还不够！</p></blockquote><p>先贴上答案，如果你跟我一样犹豫不决，不知道结果，那么跟我一起再次学习一遍吧。</p><p><img src="/posts/1248388575.html/2.webp"></p><h2 id="开始复习"><a href="#开始复习" class="headerlink" title="开始复习"></a>开始复习</h2><p><strong>首先，确定问题：函数表达式和函数声明的区别，以及困扰住我们的优先问题</strong></p><h3 id="函数声明和函数表达式的区别"><a href="#函数声明和函数表达式的区别" class="headerlink" title="函数声明和函数表达式的区别"></a>函数声明和函数表达式的区别</h3><h4 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h4><p>首先我们要知道，当函数声明与变量命名冲突的时候，要保持着<strong>函数声明优先的原则</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fn();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(‘fn’);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fn = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>例如这样，<strong>不会报错</strong>，会输出fn。</p><blockquote><p>如果你不知道为什么调用函数可以在函数声明之前，看这里</p><p>是因为javascript代码是一段一段预载的，在一段代码预载完成后，会把函数声明提前到代码段的前面执行，以便在代码段的任何地方调用，所以前面的代码无错</p></blockquote><p>那么，多个同名的函数声明，会如何呢？我们接着来看一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fn();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(‘<span class="number">1</span>’);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(‘<span class="number">2</span>’);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为2。这是因为有<strong>多个函数声明的时候，是由最后的函数声明来替代前面的</strong></p><blockquote><p>这也是我上文中读了几眼代码直接说第一个输出为最后的函数声明的原因！</p></blockquote><h4 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn();</span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;fn&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有用过的同学可能看到这里，说我知道，完后写出了上面这段代码，但其实这段代码是不对的，会爆出<code>fn is not a function</code>这个错误。</p><p>这是什么原因呢？这其实就是<strong>函数声明和函数表达式的区别之一</strong></p><p><strong>因为函数表达式相当于把一个函数当做值，赋予一个变量，而这个变量在未声明的时候，是不能使用的</strong></p><p>正确的函数表达式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;fn&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><h2 id="复习回来，再战！"><a href="#复习回来，再战！" class="headerlink" title="复习回来，再战！"></a>复习回来，再战！</h2><p>先把代码贴出来方便阅读：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面的代码输出什么</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params">foo</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(foo)</span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span></span><br><span class="line">method(foo)</span><br></pre></td></tr></table></figure><p>经过了上面的复习，我们知道，JavaScript会将函数声明提前，所以我们来整理一下这段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params">foo</span>)</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(foo)</span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br><span class="line">foo()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span></span><br><span class="line">method(foo)</span><br></pre></td></tr></table></figure><p>现在，再利用我们刚刚学的知识，来分析打印的都是什么数据：</p><p>首先，第一个打印的是我们<strong>输出C的foo函数</strong>，第二个和第三个调用foo函数的时候，<strong>函数表达式的变量已经声明</strong>了！所以函数发生了<strong>覆盖</strong>，现在的foo函数已经是<strong>输出B的foo函数</strong>了。</p><p>现在让我们来整理一下结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">B</span><br><span class="line">B</span><br></pre></td></tr></table></figure><p><strong>你学会了吗？没学会快去看看相关知识点！</strong></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>但是犹豫就是不会，不能拿<strong>曾经学过</strong>当做借口，把遇到的每一个自己不会的问题弄懂，才能逐渐让自己变得更强！</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天下午，在我们微信群里，学弟突然发出来这样一个图：&lt;br&gt;&lt;img src=&quot;/posts/1248388575.html/1.webp&quot;&gt;&lt;/p&gt;
&lt;p&gt;我点开一看，这不是函数声明跟函数表达式的知识点吗？前一阵子还看过相关文章。&lt;/p&gt;
&lt;p&gt;看了几眼，我说到：&lt;strong&gt;第一个输出应该是最后的函数声明&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaScript" scheme="https://wangenze267.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>简单的了解一下递归</title>
    <link href="https://wangenze267.github.io/posts/3902425944.html/"/>
    <id>https://wangenze267.github.io/posts/3902425944.html/</id>
    <published>2021-10-09T05:47:06.000Z</published>
    <updated>2021-10-11T05:24:05.555Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在编程中，递归大家肯定都不陌生了吧，今天我们来总结总结有关于递归的东西。</p><blockquote><p>什么？！ 你陌生， 去刷题去，完后你就熟了。</p></blockquote><span id="more"></span><h2 id="递归的定义"><a href="#递归的定义" class="headerlink" title="递归的定义"></a>递归的定义</h2><p><strong>程序调用自身的编程技巧称为递归</strong></p><h2 id="递归长什么样子"><a href="#递归长什么样子" class="headerlink" title="递归长什么样子"></a>递归长什么样子</h2><p>提到举例子我们肯定第一个想到的就是阶乘。</p><blockquote><p>n! = n * (n-1) * (n-2) * …* 1(n&gt;0)</p><p>5! = 5 * 4 * 3 * 2 * 1</p></blockquote><p>阶乘是我们从小学数学就接触的东西，没想到它现在还陪伴着我们🙄</p><p>用代码实现一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursion</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> n * recursion(n - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(recursion(<span class="number">5</span>)) <span class="comment">// 5 * 4 * 3 * 2 * 1 = 120</span></span><br></pre></td></tr></table></figure><p>再举一个例子吧，也是我们初高中课本上的，著名的河内塔问题：</p><img src="/posts/3902425944.html/河内塔.png"><p>这个问题也是用递归来解决的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hanoi</span>(<span class="params"> n, p1, p2, p3</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span> == n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;盘子从&#x27;</span> + p1 + <span class="string">&#x27;移动到&#x27;</span> + p3);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">hanoi(n-<span class="number">1</span>, p1, p3, p2);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;盘子从&#x27;</span> + p1 + <span class="string">&#x27;移动到&#x27;</span> + p3);</span><br><span class="line">hanoi(n-<span class="number">1</span>, p2, p1, p3);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">hanoi(<span class="number">3</span>,<span class="string">&#x27;p1&#x27;</span>,<span class="string">&#x27;p2&#x27;</span>,<span class="string">&#x27;p3&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="/posts/3902425944.html/%E6%B2%B3%E5%86%85%E5%A1%94%E7%BB%93%E6%9E%9C.png"></p><h2 id="总结一哈"><a href="#总结一哈" class="headerlink" title="总结一哈"></a>总结一哈</h2><p>既然要写递归，就要知道它具备什么条件，从上面的例子不难看出，递归是具有边界条件的，阶乘中的<code>n==1</code>和河内塔中的<code>1==n</code>都是边界条件，递归还具有两个部分，边界条件满足的时候进入返回过程，边界条件不满足的时候，再次进入递归过程。</p><p>那么它还具有什么特点呢？</p><ul><li>它必须有一个出口条件，也就是要有一处作为结束，变成非递归的样子处理。</li><li>递归处理的子问题要同原问题一样，并且逐渐变得简单。</li></ul><p>总结一下：<strong>我们写的递归要具有边界条件，和基于边界条件分别做出的两部分处理过程。</strong></p><blockquote><p>并且使用递归是要逐渐使得问题变得简单，最终用非递归的方法作为结尾哦。</p></blockquote><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>我觉得，递归是思考过后对于问题提出的一种解决方案。</p><p>在你提出用递归解决的时候，就已经知道他的边界条件是什么了，只需要写出递归的那部分，随后使用非递归的方式作为程序出口即可。</p><blockquote><p>点个赞，一起学习进步吧♥</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在编程中，递归大家肯定都不陌生了吧，今天我们来总结总结有关于递归的东西。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;什么？！ 你陌生， 去刷题去，完后你就熟了。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="算法/数据结构" scheme="https://wangenze267.github.io/tags/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>关于promise的使用方法</title>
    <link href="https://wangenze267.github.io/posts/3499638177.html/"/>
    <id>https://wangenze267.github.io/posts/3499638177.html/</id>
    <published>2021-10-08T09:19:49.000Z</published>
    <updated>2021-10-11T05:27:02.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>好几天前就想写一个promise的笔记了，但是一直以来就仅仅知道它是用来解决回调地狱问题的，没有一个详细的了解，所以在这几天学习的时候，针对它名下的几个方法，做了一个简要的使用介绍。</p><blockquote><p>promise：这就是我的说明书！</p><p>我：可能说的不是太全，多包涵~</p></blockquote><span id="more"></span><h2 id="先来了解一下它"><a href="#先来了解一下它" class="headerlink" title="先来了解一下它"></a>先来了解一下它</h2><p>什么是promise？它是一个类？一个对象？一个数组？</p><p>我们先打印它来看一看吧：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">Promise</span>);</span><br></pre></td></tr></table></figure><img src="/posts/3499638177.html/认识promise.png" style="zoom:60%;"><p>打印完了，我们来正式认识一下它。</p><p><strong>promise</strong>是一个构造函数，是ES6提出的异步编程解决方案，用来解决<strong>回调地狱</strong>这种问题，从打印可以看出，它有<code>reject</code>、<code>all</code>、<code>resolve</code>等方法，它的原型上有<code>catch</code>、<code>then</code>等方法。</p><p><strong>还有一种说法来自于网络：</strong>promise，意为承诺，承诺过一段时间给你结果。promise有三种状态，分别为pending（等待），fulfiled（成功），rejected（失败），状态一旦经过改变，就不会在变。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fn1执行，如果a&gt;10 执行fn2 ，如果a == 11，执行fn3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a, fn2</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a &gt; <span class="number">10</span> &amp;&amp; <span class="keyword">typeof</span> fn2 == <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    fn2(a,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="number">11</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;this is fn3&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fn1(<span class="number">11</span>, <span class="function"><span class="keyword">function</span>(<span class="params">a, fn3</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;this is fn2&#x27;</span>)</span><br><span class="line">    fn3()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面说了promise的提出是用来解决回调地狱的问题，那么什么是回调地狱呢？可以参考一下我这段代码，不断的嵌套回调函数之后，代码就会变得非常繁琐，看代码的时候眼睛不舒服，脑子也不舒服，这种嵌套回调非常多的情况，就叫做<strong>回调地狱</strong>。</p><h2 id="如何使用promise"><a href="#如何使用promise" class="headerlink" title="如何使用promise"></a>如何使用promise</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//做一些异步操作</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;执行完成&#x27;</span>);</span><br><span class="line">        resolve(<span class="string">&#x27;写啥都行&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise的构造函数接收一个function，并且这个函数需要传入两个参数：</p><ul><li>resolve ：异步操作执行成功后的回调函数</li><li>reject：异步操作执行失败后的回调函数</li></ul><h3 id="then"><a href="#then" class="headerlink" title="then"></a>then</h3><p>还记得上面我写的那个嵌套非常多的例子吗？啊，不记得，那你翻一翻~</p><p>Promise的优势就在于，可以在<code>then</code>方法中继续写Promise对象并返回，然后继续调用then来进行回调操作。</p><p>所以，从表面上看，Promise只是能够简化层层回调的写法，而实质上，Promise的精髓是“状态”，用维护状态、传递状态的方式来使得回调函数能够及时调用，它比传递callback函数要简单、灵活的多。所以使用Promise的正确场景是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//做一些异步操作</span></span><br><span class="line">       resolve(a);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;            </span><br><span class="line">&#125;</span><br><span class="line">fn1(<span class="number">11</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &gt; <span class="number">10</span>)&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;a大于10&#x27;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   resolve(a);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">a</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">11</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;a等于11&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>我将上面那个改写了一下。最后那个没有return出来是我后面没有继续then了。</p></blockquote><p>这其实就是链式写法。then就相当于我们之前的callback。</p><p>then方法中，不光可以return promise对象，也可以return数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//做一些异步操作</span></span><br><span class="line">       resolve(a);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;            </span><br><span class="line">&#125;</span><br><span class="line">fn1(<span class="number">11</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &gt; <span class="number">10</span>)&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;a大于10&#x27;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> a</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">a</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">11</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;a等于11&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="reject"><a href="#reject" class="headerlink" title="reject"></a>reject</h3><p>把promise的状态从<code>pending</code>改成<code>rejected</code>，之后我们就可以在<code>then</code>中执行失败情况的回调，来看这个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(a&gt;<span class="number">10</span>)&#123;</span><br><span class="line">       resolve(a);</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">       reject(a);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;            </span><br><span class="line">&#125;</span><br><span class="line">fn1(<span class="number">9</span>)</span><br><span class="line">.then(<span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;a大于10&#x27;</span>)</span><br><span class="line">&#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;a小于10&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>then可以接收两个参数，分别对应着resolve的回调和reject的回调，所以在调整传入的a的值，我们可以得到两个结果。</strong></p><blockquote><p>即a大于10和a小于10</p></blockquote><h3 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h3><p>对其他语言有了解的人应该可以知道，catch是用来抓取异常的，那么在promise里，它的作用也一样，<strong>它就如同then的第二个参数，对应着reject的回调</strong></p><p>写法是这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;a大于10&#x27;</span>)</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;a小于10&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>效果和写在then的第二个参数里面是一样的。</p><p>不过它还有另外一个作用：在执行resolve的回调（也就是上面then中的第一个参数）时，如果抛出异常了（代码出错了），那么并不会报错卡死进程，而是会进到这个catch方法中。</p><blockquote><p>就很像 try catch </p></blockquote><p>再来看这段代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//做一些异步操作</span></span><br><span class="line">       resolve(a);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;            </span><br><span class="line">&#125;</span><br><span class="line">fn1(<span class="number">11</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &gt; <span class="number">10</span>)&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;a大于10&#x27;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> b</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;发生了错误:&#x27;</span> + err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这段代码中 本来想return a的 结果写成了b，正常来说浏览器会报错，不会向下执行了，在我们用了catch后，</p><p>浏览器会打印出<strong>a大于10</strong>和<strong>发生了错误:ReferenceError: b is not defined</strong>。</p><p>也就是说即使是上面出错了，还是进到catch方法里面去了，而且把错误原因传到了err参数中，使得程序继续执行下去。</p><h3 id="all"><a href="#all" class="headerlink" title="all"></a>all</h3><p>all方法提供了多个任务并行，执行异步操作的能力，并且在所有异步操作执行完后才执行回调。</p><ul><li>all方法接收的参数是一个数组，其中每个对象都是promise</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="built_in">Promise</span>.all([fn1, fn2, fn3])</span><br><span class="line"></span><br><span class="line">p.then(<span class="function"><span class="title">funciton</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 三个都成功则成功  </span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 只要有一个失败，则失败 </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>有了all，我们就可以并行执行多个异步操作，有一个场景是很适合用这个的，打开一个网页，需要加载各类资源，所有的都加载完后，我们再进行页面的初始化。</p><h3 id="race"><a href="#race" class="headerlink" title="race"></a>race</h3><p>all方法的效果实际上是<strong>谁跑的慢，以谁为准执行回调</strong>，那么相对的就有另一个方法<strong>谁跑的快，以谁为准执行回调</strong>，这就是race方法，这个词本来就是赛跑的意思。</p><p>拿上面的fn123举例子，假如他们分别是1、2、3秒执行完，那么在第一秒结束的时候就会输出fn1执行后的结果，在两秒跟三秒的时候会分别输出fn2、fn3的结果。</p><p>这个race有什么用呢？使用场景还是很多的，比如我们可以用race给某个异步请求设置超时时间，并且在超时后执行相应的操作。</p><p>例如图片请求，我们将一个延迟请求（假如是3秒）跟图片请求同时使用race方法调用，在3秒的时候如果请求成功了，就会resolve进入then方法，如果失败了就会进入catch方法输出图片资源请求失败的错误。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>十一的假期结束了，上学人又要继续上课了，害。</p><blockquote><p>点个赞，一起努力进步吧♥</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;好几天前就想写一个promise的笔记了，但是一直以来就仅仅知道它是用来解决回调地狱问题的，没有一个详细的了解，所以在这几天学习的时候，针对它名下的几个方法，做了一个简要的使用介绍。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;promise：这就是我的说明书！&lt;/p&gt;
&lt;p&gt;我：可能说的不是太全，多包涵~&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="ES6" scheme="https://wangenze267.github.io/tags/ES6/"/>
    
    <category term="JavaScript" scheme="https://wangenze267.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>用那么久this了，来详细了解一下</title>
    <link href="https://wangenze267.github.io/posts/724479206.html/"/>
    <id>https://wangenze267.github.io/posts/724479206.html/</id>
    <published>2021-10-06T00:00:15.000Z</published>
    <updated>2021-10-11T05:25:41.351Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>this想必大家都很不陌生了，在例如<code>Vue.js</code>中，各种this，唰唰唰的写，但是有没有遇到this指向出错的问题呢？</p><p>我有，我猜应该也会有人跟我一样。</p><p>所以，我总结了一些this的基础概念和基本使用在这里，供大家参考。</p><span id="more"></span><h2 id="this出现在哪里"><a href="#this出现在哪里" class="headerlink" title="this出现在哪里"></a>this出现在哪里</h2><p><strong>全局上下文中的this</strong></p><p>console.log(this)来打印出来全局执行上下文中的 this，最终输出的是 window 对象。</p><p>所以可以得出这样一个结论：全局执行上下文中的 this 是指向 window 对象的。这也是 this 和作用域链的唯一交点，作用域链的最底端包含了 window 对象，全局执行上下文中的 this 也是指向 window 对象</p><p><strong>函数上下文中的this</strong></p><p>在全局环境中调用一个函数，函数内部的 this 指向的是全局变量 window。</p><p>通过一个对象来调用其内部的一个方法，该方法的执行上下文中的 this 指向对象本身</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">&#125;;</span><br><span class="line">foo(); <span class="comment">// window</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line"><span class="attr">b</span>:<span class="number">0</span>,</span><br><span class="line"><span class="attr">fn</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a.fn(); <span class="comment">//&#123; b:0, fn:f() &#125;</span></span><br></pre></td></tr></table></figure><h2 id="this指向总结"><a href="#this指向总结" class="headerlink" title="this指向总结"></a>this指向总结</h2><ul><li><p>当函数被正常调用时，在严格模式下，this 值是 undefined，非严格模式下 this 指向的是全局对象 window；</p></li><li><p>通过一个对象来调用其内部的一个方法，该方法的执行上下文中的 this 指向对象本身</p></li><li><p>ES6 中的箭头函数并不会创建其自身的执行上下文，所以箭头函数中的 this 取决于它的外部函数</p></li><li><p>new 关键字构建好了一个新对象，并且构造函数中的 this 其实就是新对象本身</p></li><li><p>嵌套函数中的 this 不会继承外层函数的 this 值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObj = &#123; </span><br><span class="line"><span class="attr">name</span> : <span class="string">&quot;Ned&quot;</span>, </span><br><span class="line"><span class="attr">showThis</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// myObj</span></span><br><span class="line">        <span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;阿泽&quot;</span>; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// window</span></span><br><span class="line">        &#125; </span><br><span class="line">        bar(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">myObj.showThis();</span><br><span class="line"><span class="built_in">console</span>.log(myObj.name); <span class="comment">// Ned</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name); <span class="comment">// 阿泽</span></span><br></pre></td></tr></table></figure><ul><li><p>解决this不继承的方法</p><ul><li>内部函数使用箭头函数</li><li>将在外层函数中创建一个变量，用来存储this，内层函数通过作用域链即可访问</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObj = &#123; </span><br><span class="line"><span class="attr">name</span> : <span class="string">&quot;Ned&quot;</span>, </span><br><span class="line"><span class="attr">showThis</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// myObj</span></span><br><span class="line">        <span class="keyword">var</span> bar = <span class="function">()=&gt;</span>&#123; </span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;阿泽&quot;</span>; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// window</span></span><br><span class="line">        &#125; </span><br><span class="line">        bar(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">myObj.showThis();</span><br><span class="line"><span class="built_in">console</span>.log(myObj.name); <span class="comment">// 阿泽</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name); <span class="comment">//  </span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObj = &#123; </span><br><span class="line"><span class="attr">name</span> : <span class="string">&quot;Ned&quot;</span>, </span><br><span class="line"><span class="attr">showThis</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// myObj</span></span><br><span class="line">        <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123; </span><br><span class="line">        self.name = <span class="string">&quot;阿泽&quot;</span>; </span><br><span class="line">        <span class="built_in">console</span>.log(self) <span class="comment">// window</span></span><br><span class="line">        &#125; </span><br><span class="line">        bar(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">myObj.showThis();</span><br><span class="line"><span class="built_in">console</span>.log(myObj.name); <span class="comment">// 阿泽</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name); <span class="comment">// </span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="改变this指向的方法"><a href="#改变this指向的方法" class="headerlink" title="改变this指向的方法"></a>改变this指向的方法</h2><h3 id="call-和-apply-的共同点"><a href="#call-和-apply-的共同点" class="headerlink" title="call 和 apply 的共同点"></a>call 和 apply 的共同点</h3><p>都能够<strong>改变函数执行时的上下文</strong>，将一个对象的方法交给另一个对象来执行，并且是立即执行的</p><blockquote><p><strong>调用 call 和 apply 的对象，必须是一个函数 Function</strong></p></blockquote><h3 id="call-和-apply-的区别"><a href="#call-和-apply-的区别" class="headerlink" title="call 和 apply 的区别"></a>call 和 apply 的区别</h3><h4 id="call-的写法"><a href="#call-的写法" class="headerlink" title="call 的写法"></a>call 的写法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.call(obj,param1,param2,...)</span><br></pre></td></tr></table></figure><p>需要注意以下几点：</p><ul><li>调用 call 的对象，必须是个函数 Function。</li><li>call 的第一个参数，是一个对象。 Function 的调用者，将会指向这个对象。如果不传，则默认为全局对象 window。</li><li>第二个参数开始，可以接收任意个参数。每个参数会映射到相应位置的 Function 的参数上。但是如果将所有的参数作为数组传入，它们会作为一个整体映射到 Function 对应的第一个参数上，之后参数都为空。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span> (<span class="params">a,b,c</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">func.call(obj, <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment">// func 接收到的参数实际上是 1,2,3</span></span><br><span class="line"></span><br><span class="line">func.call(obj, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="comment">// func 接收到的参数实际上是 [1,2,3],undefined,undefined</span></span><br><span class="line"><span class="comment">// 其实func还是接收了三个参数，只不过咱们只传了一个过去，这个应该很容易理解的</span></span><br></pre></td></tr></table></figure><h4 id="apply-的写法"><a href="#apply-的写法" class="headerlink" title="apply 的写法"></a>apply 的写法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Function.apply(obj[,argArray])</span><br></pre></td></tr></table></figure><p><strong>需要注意的是：</strong></p><ul><li>它的调用者必须是函数 Function，并且只接收两个参数，第一个参数的规则与 call 一致。</li><li>第二个参数，必须是数组或者类数组，它们会被转换成类数组，传入 Function 中，并且会被映射到 Function 对应的参数上。这也是 call 和 apply 之间，很重要的一个区别。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func.apply(obj, [1,2,3])</span><br><span class="line">// func 接收到的参数实际上是 1,2,3</span><br><span class="line"></span><br><span class="line">func.apply(obj, &#123;</span><br><span class="line">    0: 1,</span><br><span class="line">    1: 2,</span><br><span class="line">    2: 3,</span><br><span class="line">    length: 3</span><br><span class="line">&#125;)</span><br><span class="line">// func 接收到的参数实际上是 1,2,3</span><br></pre></td></tr></table></figure><h3 id="call-和-apply-的用途"><a href="#call-和-apply-的用途" class="headerlink" title="call 和 apply 的用途"></a>call 和 apply 的用途</h3><p>下面会分别列举 call 和 apply 的一些使用场景。</p><blockquote><p>声明：例子中没有哪个场景是必须用 call 或者必须用 apply 的，看个人习惯就好。</p></blockquote><h4 id="call-的使用场景"><a href="#call-的使用场景" class="headerlink" title="call 的使用场景"></a>call 的使用场景</h4><p><strong>对象的继承</strong>如下面这个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">superClass</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">this</span>.print = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subClass</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    superClass.call(<span class="built_in">this</span>);  <span class="comment">// 执行superClass，并将superClass方法中的this指向subClass</span></span><br><span class="line">    <span class="built_in">this</span>.print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subClass();</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>subClass 通过 call 方法，继承了 superClass 的 print 方法和 a 变量。</p><p>此外，subClass 还可以扩展自己的其他方法。</p><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><h4 id="bind-的用法"><a href="#bind-的用法" class="headerlink" title="bind 的用法"></a>bind 的用法</h4><p>在 MDN 上的解释是：bind() 方法创建一个新的函数，在调用时设置 this 关键字为提供的值。并在调用新函数时，将给定参数列表作为原函数的参数序列的前若干项。</p><p>它的语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Function.bind(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure><p>bind 方法 与 apply 和 call 比较类似，也能改变函数体内的 this 指向。</p><p>不同的是，<strong>bind 方法的返回值是函数，并且需要稍后调用，才会执行</strong>。</p><p>而 apply 和 call 则是立即调用，来看下面这个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function add (c) &#123;</span><br><span class="line">    return this.a + this.b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var obj = &#123;a:1,b:2&#125;</span><br><span class="line"></span><br><span class="line">add.bind(obj, 5); // 这时，并不会返回 8</span><br><span class="line">add.bind(sub, 5)(); // 调用后，返回 8</span><br></pre></td></tr></table></figure><p>如果 bind 的第一个参数是 null 或者 undefined，this 就指向全局对象 window。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>“abc”的使用，具体还是要看个人运用，理解了之后，那它们就变成了工具，怎么顺手怎么来了~</p><p>顺便说一下本人，我还是喜欢apply多一点hhh，用它的次数多一点，所以在场景用谁都行的时候，我一般都会选择apply。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;this想必大家都很不陌生了，在例如&lt;code&gt;Vue.js&lt;/code&gt;中，各种this，唰唰唰的写，但是有没有遇到this指向出错的问题呢？&lt;/p&gt;
&lt;p&gt;我有，我猜应该也会有人跟我一样。&lt;/p&gt;
&lt;p&gt;所以，我总结了一些this的基础概念和基本使用在这里，供大家参考。&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaScript" scheme="https://wangenze267.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>网络安全 | XSS基础知识</title>
    <link href="https://wangenze267.github.io/posts/1710773078.html/"/>
    <id>https://wangenze267.github.io/posts/1710773078.html/</id>
    <published>2021-10-05T14:26:37.000Z</published>
    <updated>2021-10-11T05:25:20.403Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天又到了我最喜欢的东西，一些网络安全有关的东西。</p><blockquote><p>小时候就特别喜欢黑客，觉得特帅~ </p><p>大学报计算机相关专业可能也是这方面的原因，但是阴差阳错，没有走网络安全的方向。</p></blockquote><p>今天来说一说，XSS攻击的事情，我有幸，曾经用php搭建的博客（typecho），被我同学挂了脚本，xss了一下，完后，什么什么的，啊，你们懂得。</p><p>从那以后，我就知道，网络安全，是不可避免的，是一定要考虑到的，是一定要去了解的东西。</p><blockquote><p>身处网络时代，谁又能置身事外！</p></blockquote><span id="more"></span><h3 id="什么是xss攻击？"><a href="#什么是xss攻击？" class="headerlink" title="什么是xss攻击？"></a>什么是xss攻击？</h3><p>XSS又叫CSS（Cross Site Script），跨站脚本攻击：指恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。</p><img src="/posts/1710773078.html/image-20210617162454870.png" alt="image-20210617162454870" style="zoom: 33%;"><p>那么，当当前的网页弹出1的时候，我们就知道，这个网页是可以执行js脚本的了，那么我们是不是就可以通过document去盗取一些信息，来帮助我们<strong>更进一步</strong>的去潜入进去呢？例如盗取一下cookie等。</p><p><strong>先来看一下XSS有几种吧</strong>：</p><ul><li><strong>持久型</strong>：一些可以提交的地方，文章评论，个人信息填写等，如果没有加过滤的话，嵌入的脚本就会被提交到服务器上，之后用户每次访问都会触发脚本（例如图中的alert(1)，每个用户打开都会弹出1）</li><li><strong>非持久型</strong>：反射型跨站脚本漏洞，是最普遍的类型。大多是链接的方式，需要用户点击，才能返回脚本进行操作（用户访问服务器–&gt;点击跨站链接—&gt;返回脚本代码）</li><li><strong>DOM型</strong>：客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM XSS漏洞（很少见emm，反正我没见过hhh，日后见到了来补上，再细说）</li></ul><h3 id="XSS可能会带来的危害"><a href="#XSS可能会带来的危害" class="headerlink" title="XSS可能会带来的危害"></a>XSS可能会带来的危害</h3><p><strong>使网页无法正常运行</strong>：这个就是我们上面中图示的内容，如果不仅仅是一个<code>alert(1)</code>呢？外部来一个永久循环，这个网页的弹窗就会永远关不掉，导致无法正常的实现整体业务流程。</p><p><strong>获取cookie信息</strong>：这个我们也在上文中说过，如果网页上可以执行js脚本的话，那么我们是可以通过<code>document.cookie</code>来实现获取用户cookie的。</p><blockquote><p>试想下如果像QQ空间说说中能够写入xss攻击语句，那岂不是看了你说说的人的号你都可以登录</p><p>一个字：爽~</p></blockquote><p><strong>劫持流量恶意跳转</strong>：</p><p>像这样，在网页中想办法插入一句像这样的语句，访问的网页就会直接跳转到百度去。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.location.href=<span class="string">&quot;http://www.baidu.com&quot;</span>;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="XSS的攻击应该具备这样的条件"><a href="#XSS的攻击应该具备这样的条件" class="headerlink" title="XSS的攻击应该具备这样的条件"></a>XSS的攻击应该具备这样的条件</h3><p>网页内部有输入框，内容可存储在服务器上</p><p>输入框内的内容，才能被<strong>提交</strong>到他的服务器上，才能改变这个网页内部的文件内容。</p><blockquote><p>前提是这个输入，没有被过滤，才会成功哦！</p><p>可以自己写demo尝试一下，不建议直接在网络上开搞emm，自己玩玩就行哈~</p></blockquote><h3 id="XSS防御措施（对用户输入内容和服务端返回内容进行过滤和转译）"><a href="#XSS防御措施（对用户输入内容和服务端返回内容进行过滤和转译）" class="headerlink" title="XSS防御措施（对用户输入内容和服务端返回内容进行过滤和转译）"></a><strong>XSS防御措施（对用户输入内容和服务端返回内容进行过滤和转译）</strong></h3><p><strong>现代大部分浏览器都自带 XSS 筛选器</strong>（vue/react等主流框架已经避免类似问题，vue举例：不能在template中写script标签，无法在js中通过ref或append等方式动态改变或添加script标签）</p><p><strong>过滤</strong>，对诸如<strong>script</strong>、<strong>img</strong>、<strong>a</strong>等标签进行过滤。</p><p><strong>编码</strong>，像一些常见的符号，如&lt;&gt;在输入的时候要对其进行转换编码，这样做浏览器是不会对该标签进行解释执行的，同时也不影响显示效果。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>学习网络安全是为了保护好自己，在这个网络时代，避免自己的信息被不法分子盗取，而不是说我们学会如何去<strong>攻击别人</strong>。</p><blockquote><p> 还有更多的网络安全知识等着我们去学习呢，冲！</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;今天又到了我最喜欢的东西，一些网络安全有关的东西。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小时候就特别喜欢黑客，觉得特帅~ &lt;/p&gt;
&lt;p&gt;大学报计算机相关专业可能也是这方面的原因，但是阴差阳错，没有走网络安全的方向。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天来说一说，XSS攻击的事情，我有幸，曾经用php搭建的博客（typecho），被我同学挂了脚本，xss了一下，完后，什么什么的，啊，你们懂得。&lt;/p&gt;
&lt;p&gt;从那以后，我就知道，网络安全，是不可避免的，是一定要考虑到的，是一定要去了解的东西。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;身处网络时代，谁又能置身事外！&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="网络安全" scheme="https://wangenze267.github.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的继承，原型和原型链</title>
    <link href="https://wangenze267.github.io/posts/2566346867.html/"/>
    <id>https://wangenze267.github.io/posts/2566346867.html/</id>
    <published>2021-10-04T04:26:58.000Z</published>
    <updated>2021-10-11T05:21:59.340Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>想必，学过 java 和 C++ 的小伙伴们，对于继承这个词应该不陌生，最近我也是一直在巩固JavaScript的知识，今天就来一起学习一下JavaScript里的继承吧。</p><span id="more"></span><h2 id="继承是什么？"><a href="#继承是什么？" class="headerlink" title="继承是什么？"></a>继承是什么？</h2><p>首先我们要明确继承的概念：</p><p><strong>继承就是一个对象可以访问另外一个对象中的属性和方法</strong></p><img src="/posts/2566346867.html/01.png" alt="image-20210617142202137" style="zoom: 50%;"><p>B继承了A，所以B也有A具有的<code>color</code>属性，这个是不是我们接触CSS的时候，会有样式继承这个东西，可以这么理解一下下~</p><h2 id="继承的目的？"><a href="#继承的目的？" class="headerlink" title="继承的目的？"></a>继承的目的？</h2><p>继承的目的我觉得殊途同归，都是实现了父类的设计，并且进行代码复用。</p><h2 id="继承的方式"><a href="#继承的方式" class="headerlink" title="继承的方式"></a>继承的方式</h2><p>java、c++等：java是通过<code>class</code>类，C++是通过<code>:</code></p><p>而我们的JavaScript，是通过<strong>原型链</strong> ，ES2015/ES6 中引入了 class 关键字，但那只是语法糖，JavaScript 的继承依然和基于类的继承没有一点关系。</p><h2 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h2><p><strong>JavaScript 只有一种结构：对象。</strong></p><p>JavaScript 的每个对象都包含了一个隐藏属性__proto__，我们就把该隐藏属性 <strong>proto</strong> 称之为该<strong>对象的原型</strong> (prototype)，<strong>proto</strong> 指向了内存中的另外一个对象，我们就把 <strong>proto</strong> 指向的对象称为该<strong>对象的原型</strong>，那么该对象就可以直接访问其原型对象的方法或者属性。</p><p><img src="/posts/2566346867.html/02.png" alt="image-20210617143041487"></p><p>我们可以看到使用 C.name 和 C.color 时，给人的感觉属性 <code>name</code> 和 <code>color</code> 都是对象 C 本身的属性，但实际上这些属性都是位于原型对象上，我们把这个查找属性的路径称为<strong>原型链</strong></p><p>每个实例对象（ <strong>object</strong> ）都有一个私有属性（称之为 <strong>proto</strong> ）指向它的构造函数的原型对象（<strong>prototype</strong> ）。该原型对象也有一个自己的原型对象( <strong>proto</strong> ) ，层层向上直到一个对象的原型对象为 <code>null</code>。根据定义，<code>null</code> 没有原型，并作为这个<strong>原型链</strong>中的最后一个环节。</p><blockquote><p>查到到null，证明链子到头啦~</p></blockquote><p>总结一下：<strong>继承</strong>就是一个对象可以访问另外一个对象中的属性和方法，在JavaScript 中，我们通过<strong>原型和原型链</strong>的方式来实现了继承特性。</p><h2 id="继承的方式-1"><a href="#继承的方式-1" class="headerlink" title="继承的方式"></a>继承的方式</h2><h3 id="构造函数如何创建对象"><a href="#构造函数如何创建对象" class="headerlink" title="构造函数如何创建对象"></a>构造函数如何创建对象</h3><blockquote><p>有一点java基础的看这块会不会特别得劲~，我当初是学过java之后接触到的这个概念，就很顺利的就理解了。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DogFactory</span>(<span class="params">type, color</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.type = type;</span><br><span class="line">    <span class="built_in">this</span>.color = color</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> DogFactory(<span class="string">&#x27;Dog&#x27;</span>,<span class="string">&#x27;Black&#x27;</span>)</span><br></pre></td></tr></table></figure><p>创建实例的过程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dog = &#123;&#125;;</span><br><span class="line">dog.__proto__ = DogFactory.prototype;</span><br><span class="line">DogFactory.call(dog,<span class="string">&#x27;Dog&#x27;</span>,<span class="string">&#x27;Black&#x27;</span>);</span><br></pre></td></tr></table></figure><img src="/posts/2566346867.html/03.png" alt="image-20210617153157853" style="zoom: 33%;"><p>观察这个图，我们可以看到执行流程分为三步：</p><ul><li><p><strong>首先，创建了一个空白对象 dog；</strong></p></li><li><p><strong>然后，将 DogFactory 的 prototype 属性设置为 dog 的原型对象，这就是给 dog 对象设置原型对象的关键一步；</strong></p></li><li><p><strong>最后，再使用 dog 来调用 DogFactory，这时候 DogFactory 函数中的 this 就指向了对象 dog，然后在 DogFactory 函数中，利用 this 对对象 dog 执行属性填充操作，最终就创建了对象 dog。</strong></p></li></ul><blockquote><p>每个函数对象中都有一个公开的 prototype 属性，当你将这个函数作为构造函数来创建一个新的对象时，新创建对象的原型对象就指向了该函数的 prototype 属性，所以通过该构造函数创建的任何实例都可以通过原型链找到构造函数的prototype上的属性</p></blockquote><p><strong>实例的proto属性 ==  构造函数的proyotype</strong></p><p>也就是说<strong>dog.__proto == DogFactory.prototype</strong></p><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><p><strong>原理：</strong> 实现的本质是<strong>将子类的原型指向了父类的实例</strong></p><p><strong>优点：</strong></p><ul><li>父类新增原型方法/原型属性，子类都能访问到</li><li>简单容易实现</li></ul><p><strong>缺点：</strong></p><ul><li>不能实现多重继承</li><li>来自原型对象的所有属性被所有实例共享</li><li>创建子类实例时，无法向父类构造函数传参</li></ul><img src="/posts/2566346867.html/image-20210617154553631.png" alt="image-20210617154553631" style="zoom:50%;"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name,</span><br><span class="line">    <span class="built_in">this</span>.age = age,</span><br><span class="line">    <span class="built_in">this</span>.play = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="built_in">this</span>.setName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.setAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"><span class="comment">//子类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.price = price</span><br><span class="line">    <span class="built_in">this</span>.setScore = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person(<span class="string">&#x27;wang&#x27;</span>,<span class="number">23</span>) <span class="comment">// 子类型的原型为父类型的一个实例对象</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Student(<span class="number">15000</span>)</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> Student(<span class="number">14000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s1,s2)</span><br></pre></td></tr></table></figure><h3 id="借用构造函数实现继承"><a href="#借用构造函数实现继承" class="headerlink" title="借用构造函数实现继承"></a>借用构造函数实现继承</h3><p><strong>原理</strong>：在子类型构造函数中通用call()调用父类型构造函数</p><p><strong>特点</strong>：</p><ul><li>解决了原型链继承中子类实例共享父类引用属性的问题</li><li>创建子类实例时，可以向父类传递参数</li><li>可以实现多重继承(call多个父类对象)</li></ul><p><strong>缺点</strong>：</p><ul><li>实例并不是父类的实例，只是子类的实例</li><li>只能继承父类的实例属性和方法，不能继承父类原型属性和方法</li><li>无法实现函数复用，每个子类都有父类实例函数的副本，影响性能</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name,</span><br><span class="line">    <span class="built_in">this</span>.age = age,</span><br><span class="line">    <span class="built_in">this</span>.setName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Person.prototype.setAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, price</span>) </span>&#123;</span><br><span class="line">    Person.call(<span class="built_in">this</span>, name, age) </span><br><span class="line">    <span class="comment">// 相当于: </span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    this.Person(name, age)</span></span><br><span class="line"><span class="comment">    this.name = name</span></span><br><span class="line"><span class="comment">    this.age = age*/</span></span><br><span class="line">    <span class="built_in">this</span>.price = price</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> s1 = <span class="keyword">new</span> Student(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">20</span>, <span class="number">15000</span>)</span><br></pre></td></tr></table></figure><h3 id="原型链-借用构造函数的组合继承"><a href="#原型链-借用构造函数的组合继承" class="headerlink" title="原型链+借用构造函数的组合继承"></a>原型链+借用构造函数的组合继承</h3><p><strong>原理</strong>：通过调用父类构造，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现函数复用。</p><p><strong>优点</strong>：</p><ul><li>可以继承实例属性/方法，也可以继承原型属性/方法</li><li>不存在引用属性共享问题</li><li>可传参</li><li>父类原型上的函数可复用</li></ul><p><strong>缺点</strong>：</p><ul><li>调用了两次父类构造函数，生成了两份实例</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name,</span><br><span class="line">    <span class="built_in">this</span>.age = age,</span><br><span class="line">    <span class="built_in">this</span>.setAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.setAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;111&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, price</span>) </span>&#123;</span><br><span class="line">    Person.call(<span class="built_in">this</span>,name,age)</span><br><span class="line">    <span class="built_in">this</span>.price = price</span><br><span class="line">    <span class="built_in">this</span>.setScore = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person()</span><br><span class="line">Student.prototype.constructor = Student<span class="comment">//组合继承也是需要修复构造函数指向的</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Student(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">20</span>, <span class="number">15000</span>)</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> Student(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">22</span>, <span class="number">14000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s1)</span><br><span class="line"><span class="built_in">console</span>.log(s1.constructor) <span class="comment">//Student</span></span><br></pre></td></tr></table></figure><h3 id="ES6-class继承"><a href="#ES6-class继承" class="headerlink" title="ES6 class继承"></a>ES6 class继承</h3><p><strong>原理：</strong> ES6中引入了class关键字，class可以通过extends关键字实现继承，还可以通过static关键字定义类的静态方法,这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。</p><blockquote><p>我当时第一次见的时候，还以为是java</p><p>其实我还是觉得，class写起来得劲多了，哈哈哈</p></blockquote><p><strong>优点</strong>：</p><ul><li>语法简单易懂,操作更方便</li></ul><p><strong>缺点</strong>：</p><ul><li>并不是所有的浏览器都支持class关键字</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用类的构造方法</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">        <span class="built_in">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一般的方法</span></span><br><span class="line">    <span class="function"><span class="title">showName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;调用父类的方法&quot;</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name, <span class="built_in">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span>  Person(<span class="string">&#x27;kobe&#x27;</span>, <span class="number">39</span>)</span><br><span class="line"><span class="built_in">console</span>.log(p1)</span><br><span class="line"><span class="comment">//定义一个子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, age, salary</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age)<span class="comment">//通过super调用父类的构造方法</span></span><br><span class="line">        <span class="built_in">this</span>.salary = salary</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">showName</span>(<span class="params"></span>)</span> &#123;<span class="comment">//在子类自身定义方法</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;调用子类的方法&quot;</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name, <span class="built_in">this</span>.age, <span class="built_in">this</span>.salary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> s1 = <span class="keyword">new</span> Student(<span class="string">&#x27;wade&#x27;</span>, <span class="number">38</span>, <span class="number">1000000000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s1)</span><br><span class="line">s1.showName()</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>其实我没有在平时写的项目中，用过继承，所以不太懂具体的应用场景，希望大佬们可以指点一下。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;想必，学过 java 和 C++ 的小伙伴们，对于继承这个词应该不陌生，最近我也是一直在巩固JavaScript的知识，今天就来一起学习一下JavaScript里的继承吧。&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaScript" scheme="https://wangenze267.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>学会这些，再也不怕水平垂直居中了</title>
    <link href="https://wangenze267.github.io/posts/4281072405.html/"/>
    <id>https://wangenze267.github.io/posts/4281072405.html/</id>
    <published>2021-10-03T06:26:56.000Z</published>
    <updated>2021-10-11T05:25:35.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天来看看一个之前困扰我很久的问题，在CSS中，水平垂直居中，能有几种写法。</p><h2 id="方法一：margin-auto"><a href="#方法一：margin-auto" class="headerlink" title="方法一：margin:auto"></a>方法一：margin:auto</h2><p>子绝父相，当元素绝对定位的时候，会根据最近父元素进行定位，利用这个特性，我们有了这种方法。</p><span id="more"></span><p>CSS代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTML代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;avatar.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图：</p><img src="/posts/4281072405.html/marginauto.png" style="zoom:60%;"><h2 id="方法二：flex弹性盒子法"><a href="#方法二：flex弹性盒子法" class="headerlink" title="方法二：flex弹性盒子法"></a>方法二：flex弹性盒子法</h2><p>利用flex，<code>align-items:center</code>是控制垂直方向居中，<code>justify-content:center</code>是控制水平方向的居中。</p><p>CSS代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTML代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;avatar.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图：</p><img src="/posts/4281072405.html/marginauto.png" style="zoom:60%;"><h2 id="方法三：margin-负数法"><a href="#方法三：margin-负数法" class="headerlink" title="方法三：margin:负数法"></a>方法三：margin:负数法</h2><p>margin可以为负数是我在牛客上报了个课之后才学到的，在那之前一直没有试过。</p><p>道理其实跟方法一差不多，通过百分比将图片移动到容器中心，再对齐中心点就行了。</p><p>要记住margin如果是负数的话就是向该方向移动，例如margin-left:-100px;，就是向左移动100px。它与正常添加margin是撑开正好相反。</p><blockquote><p>还不明白可以去写个小demo就懂啦。</p></blockquote><p>CSS代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTML代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;avatar.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图：</p><img src="/posts/4281072405.html/marginauto.png" style="zoom:60%;"><h2 id="方法四：table-cell法"><a href="#方法四：table-cell法" class="headerlink" title="方法四：table-cell法"></a>方法四：table-cell法</h2><p>这应该算是很老的方法了吧，我没有这么写过。是在百度上搜索得到的结果，完后尝试写了一下。</p><blockquote><p>有个问题，因为按照理解，我觉得img里不加那个应该也是居中的，但是我加了之后在浏览器调试发现，他向上偏移了一些肉眼大概数不出来的距离，在img里加上之后才消失，不知道为什么，希望有大佬可以告知。</p></blockquote><p>CSS代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">   <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTML代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;avatar.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图：</p><img src="/posts/4281072405.html/marginauto.png" style="zoom:60%;"><h2 id="方法五：translate-50-50"><a href="#方法五：translate-50-50" class="headerlink" title="方法五：translate(-50%,-50%)"></a>方法五：translate(-50%,-50%)</h2><p>translate()函数可以将元素向指定的方向移动，我们可以利用它来做成与方法三相同的事情。</p><p>CSS代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">   <span class="attribute">position</span>: absolute;</span><br><span class="line">   <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">   <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">   <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTML代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;avatar.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图：</p><img src="/posts/4281072405.html/marginauto.png" style="zoom:60%;"><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>说一下我自己的感受吧，这一共是五种方法，我用过1、2、3、5，其中2和5我用的较多，又以2为最多。</p><p>日后如果见到还有别的，也会记录在此的。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天来看看一个之前困扰我很久的问题，在CSS中，水平垂直居中，能有几种写法。&lt;/p&gt;
&lt;h2 id=&quot;方法一：margin-auto&quot;&gt;&lt;a href=&quot;#方法一：margin-auto&quot; class=&quot;headerlink&quot; title=&quot;方法一：margin:auto&quot;&gt;&lt;/a&gt;方法一：margin:auto&lt;/h2&gt;&lt;p&gt;子绝父相，当元素绝对定位的时候，会根据最近父元素进行定位，利用这个特性，我们有了这种方法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Css" scheme="https://wangenze267.github.io/tags/Css/"/>
    
    <category term="CSS" scheme="https://wangenze267.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>用Node.js做一个本地的石头剪刀布游戏</title>
    <link href="https://wangenze267.github.io/posts/2316163776.html/"/>
    <id>https://wangenze267.github.io/posts/2316163776.html/</id>
    <published>2021-10-02T15:59:41.000Z</published>
    <updated>2021-10-11T05:25:45.840Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前一段日子学了个石头剪刀布游戏，自己在本地进行了实现，想挂在自己服务器上让他形成一个外网可访问的游戏的时候，出了问题，是接口请求路径不对的问题，现在还不知道什么原因，等解决之后我还会更一下。</p><span id="more"></span><h3 id="所需要准备的"><a href="#所需要准备的" class="headerlink" title="所需要准备的"></a>所需要准备的</h3><ul><li>Node.js环境（没有的可以去官网下一下，傻瓜式安装就好）</li><li>基础的html、css、js能力</li><li>入门级的Node.js就好（因为我也是这个级别）</li><li>一个你熟悉的代码编写工具</li></ul><h3 id="开始上手操作"><a href="#开始上手操作" class="headerlink" title="开始上手操作"></a>开始上手操作</h3><p>首先我们需要一个html页面来作游戏结果的返回以及玩家操作。</p><p><strong>需求分析：</strong></p><ul><li>我们需要一个地方来做游戏结果的返回</li><li>还需要三个按钮来给用户做操作交互</li></ul><p>下面来看<code>index.html</code>文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;output&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 400px; width: 600px; background: #eee&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;rock&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 40px; width: 80px&quot;</span>&gt;</span>石头<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;scissor&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 40px; width: 80px&quot;</span>&gt;</span>剪刀<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;paper&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 40px; width: 80px&quot;</span>&gt;</span>布<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我定义了一个<code>div</code>，来作为显示游戏结果的地方，定义了三个按钮，分别代表剪刀、石头、布。</p><p>接下来我们应该做的就是通过接口的方式，提交我们用户的操作并且获取游戏结果，将他显示在刚刚的<code>div</code>里。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $button = &#123;</span><br><span class="line">        <span class="attr">rock</span>: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rock&#x27;</span>),</span><br><span class="line">        <span class="attr">scissor</span>: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;scissor&#x27;</span>),</span><br><span class="line">        <span class="attr">paper</span>: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;paper&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> $output = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;output&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys($button).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    $button[key].addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        fetch(<span class="string">`http://<span class="subst">$&#123;location.host&#125;</span>/game?action=<span class="subst">$&#123;key&#125;</span>`</span>)</span><br><span class="line">            .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> res.text()</span><br><span class="line">            &#125;)</span><br><span class="line">            .then(<span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">                $output.innerHTML += text + <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>之后我们去建立一个<code>game.js</code>文件，写一下游戏的判断逻辑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">palyerAction</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>([<span class="string">&#x27;rock&#x27;</span>,<span class="string">&#x27;scissor&#x27;</span>,<span class="string">&#x27;paper&#x27;</span>].indexOf(palyerAction) == -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;invalid playerAction&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算出电脑出的结果</span></span><br><span class="line">    <span class="keyword">var</span> computerAction;</span><br><span class="line">    <span class="keyword">var</span> random = <span class="built_in">Math</span>.random() * <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span>(random &lt; <span class="number">1</span>)&#123;</span><br><span class="line">        computerAction = <span class="string">&quot;rock&quot;</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(random &gt; <span class="number">2</span>)&#123;</span><br><span class="line">        computerAction = <span class="string">&quot;scissor&quot;</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        computerAction = <span class="string">&quot;paper&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(computerAction == palyerAction)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(</span><br><span class="line">        (computerAction == <span class="string">&quot;rock&quot;</span> &amp;&amp; palyerAction == <span class="string">&quot;scissor&quot;</span>) ||</span><br><span class="line">        (computerAction == <span class="string">&quot;scissor&quot;</span> &amp;&amp; palyerAction == <span class="string">&quot;paper&quot;</span>) ||</span><br><span class="line">        (computerAction == <span class="string">&quot;paper&quot;</span> &amp;&amp; palyerAction == <span class="string">&quot;rock&quot;</span>)</span><br><span class="line">    )&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致的逻辑很简单，通过随机数让电脑出拳，之后判断胜负并返回。</p><p>下面看一下用<code>node.js</code>写的简单交互的地方：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> game = <span class="built_in">require</span>(<span class="string">&#x27;./game&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> playerWon = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> playerLastAction = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> sameCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">    .createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> parsedUrl = url.parse(request.url);</span><br><span class="line">        <span class="keyword">if</span> (parsedUrl.pathname == <span class="string">&#x27;/favicon.ico&#x27;</span>) &#123;</span><br><span class="line">            response.writeHead(<span class="number">200</span>);</span><br><span class="line">            response.end();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (parsedUrl.pathname == <span class="string">&#x27;/game&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> query = querystring.parse(parsedUrl.query);</span><br><span class="line">            <span class="keyword">const</span> playerAction = query.action;</span><br><span class="line">            <span class="keyword">if</span> (playerWon &gt;= <span class="number">3</span> || sameCount == <span class="number">9</span>) &#123;</span><br><span class="line">                response.writeHead(<span class="number">500</span>);</span><br><span class="line">                response.end(<span class="string">&#x27;我再也不和你玩了！&#x27;</span>);</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (playerLastAction &amp;&amp; playerAction == playerLastAction) &#123;</span><br><span class="line">                sameCount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sameCount = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            playerLastAction = playerAction</span><br><span class="line">            <span class="keyword">if</span> (sameCount &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">                response.writeHead(<span class="number">400</span>);</span><br><span class="line">                response.end(<span class="string">&#x27;你作弊！&#x27;</span>);</span><br><span class="line">                sameCount = <span class="number">9</span>;</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 执行游戏逻辑</span></span><br><span class="line">            <span class="keyword">const</span> gameResult = game(playerAction);</span><br><span class="line">            <span class="comment">// 先返回头部</span></span><br><span class="line">            response.writeHead(<span class="number">200</span>);</span><br><span class="line">            <span class="comment">// 根据不同的游戏结果返回不同的说明</span></span><br><span class="line">            <span class="keyword">if</span> (gameResult == <span class="number">0</span>) &#123;</span><br><span class="line">                response.end(<span class="string">&#x27;平局！&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (gameResult == <span class="number">1</span>) &#123;</span><br><span class="line">                response.end(<span class="string">&#x27;你赢了！&#x27;</span>);</span><br><span class="line">                <span class="comment">// 玩家胜利次数统计+1</span></span><br><span class="line">                playerWon++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                response.end(<span class="string">&#x27;你输了！&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果访问的是根路径，则把游戏页面读出来返回出去</span></span><br><span class="line">        <span class="keyword">if</span> (parsedUrl.pathname == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">            fs.createReadStream(__dirname + <span class="string">&#x27;/index.html&#x27;</span>).pipe(response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>在cmd窗口中输入<code>node index.js</code>就可以在浏览器的<code>localhost:3000</code>端口中看见这个游戏啦！</p><blockquote><p>有一些node基础的同学们应该看起来很容易，毕竟我也不咋会emm。</p></blockquote><p>那，来看一下效果吧。</p><blockquote><p>没有做丝毫美化，实在是懒欸。</p></blockquote><p><img src="/posts/2316163776.html/%E7%9F%B3%E5%A4%B4%E5%89%AA%E5%88%80%E5%B8%831.gif"></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>日后想优化一下，挂到自己服务器上，嘿嘿，好歹是自己做的第一个小游戏~</p><blockquote><p>大家有什么好的建议嘛~</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;前一段日子学了个石头剪刀布游戏，自己在本地进行了实现，想挂在自己服务器上让他形成一个外网可访问的游戏的时候，出了问题，是接口请求路径不对的问题，现在还不知道什么原因，等解决之后我还会更一下。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Node.js" scheme="https://wangenze267.github.io/tags/Node-js/"/>
    
    <category term="经历" scheme="https://wangenze267.github.io/tags/%E7%BB%8F%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数组去重问题</title>
    <link href="https://wangenze267.github.io/posts/1826147754.html/"/>
    <id>https://wangenze267.github.io/posts/1826147754.html/</id>
    <published>2021-10-01T08:27:02.536Z</published>
    <updated>2021-10-11T05:22:18.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这应该是一个很常见的问题了，既然是常见的，那我们就更应该来学习一下！</p><h2 id="开始研究"><a href="#开始研究" class="headerlink" title="开始研究"></a>开始研究</h2><h3 id="原始"><a href="#原始" class="headerlink" title="原始"></a>原始</h3><p>数组去重，最开始我的思路是这样：定义一个新数组，完后两层for循环，如果数据第一次出现，就push到新数组里，如果重复就break掉，利用j的值与res长度相等这一点来判断数据唯一，最后返回新数组就行了。</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">8</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;66&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> res = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; res.length; j ++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i] === res[j])&#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果数据第一次出现，那么执行完上面for语句后，j的值应该等于res的长度才对</span></span><br><span class="line"><span class="keyword">if</span>(j === res.length)&#123;</span><br><span class="line">res.push(arr[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(arr));</span><br></pre></td></tr></table></figure><h3 id="利用indexOf优化原始方法"><a href="#利用indexOf优化原始方法" class="headerlink" title="利用indexOf优化原始方法"></a>利用indexOf优化原始方法</h3><p>我们先来简单了解一下indexOf：</p><p>indexOf(item,start) 方法可返回数组中某个指定的元素位置。</p><p>该方法将从头到尾地检索数组，看它是否含有对应的元素。开始检索的位置在数组 start 处或数组的开头（没有指定 start 参数时）。如果找到一个 item，则返回 item 的第一次出现的位置。开始位置的索引为 0。</p><p><strong>如果在数组中没找到指定元素则返回 -1。</strong></p><p>看到这大家都明白我们利用的是哪一点了吧，没错，就是加粗的那一句话：<strong>如果在数组中没找到指定元素则返回 -1。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">8</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;66&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> res = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(res.indexOf(arr[i]) === -<span class="number">1</span>)&#123;</span><br><span class="line">res.push(arr[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(arr));</span><br></pre></td></tr></table></figure><h3 id="再次优化，filter方法！"><a href="#再次优化，filter方法！" class="headerlink" title="再次优化，filter方法！"></a>再次优化，filter方法！</h3><p>filter，顾名思义，过滤的意思，该方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p><p>思路：用filter代替一层循环与indexOf配合，达到过滤效果，直接返回去重过后的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">8</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;66&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> res = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> arr.indexOf(item) === index</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr));</span><br></pre></td></tr></table></figure><h3 id="换种思路？变成有序数组？"><a href="#换种思路？变成有序数组？" class="headerlink" title="换种思路？变成有序数组？"></a>换种思路？变成有序数组？</h3><p>不知道刷过几天力扣的小伙伴们有没有这种感觉，看见题目中出现数组，眼睛就立刻往前瞄了瞄，看看是有序数组还是无序数组~</p><p>回到这个问题上，我们将要去重的数组变成有序，重复的数据肯定都挨着了，用一个变量存放上一个元素值，再循环判断当前值与上一个元素值是否相同，如果不相同，就将它添加到res中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">8</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;66&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> res = []</span><br><span class="line"><span class="keyword">var</span> pre</span><br><span class="line">arr = arr.sort()</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!i || pre !== arr[i])&#123;</span><br><span class="line">res.push(arr[i])</span><br><span class="line">&#125;</span><br><span class="line">pre = arr[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(arr));</span><br></pre></td></tr></table></figure><h3 id="再再次优化，filter！"><a href="#再再次优化，filter！" class="headerlink" title="再再次优化，filter！"></a>再再次优化，filter！</h3><p>刚刚悟了~，filter好像也可以把排序这里重写一下，变得更为简洁，我们直接看代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">8</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;66&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> res = arr.sort().filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> !index || item !== arr[index - <span class="number">1</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(arr));</span><br></pre></td></tr></table></figure><h3 id="ES6，Set来袭！"><a href="#ES6，Set来袭！" class="headerlink" title="ES6，Set来袭！"></a>ES6，Set来袭！</h3><p>ES6给我们带来了很多好处，其中，map、set尤为优秀。</p><p>Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。</p><p>Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。</p><p>所以我们可以利用Set的这一特性，来进行去重处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">8</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;66&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(arr));</span><br></pre></td></tr></table></figure><p>注：Set是对象，所以要转成数组进行返回。</p><h4 id="懂解构赋值的你，可以再简化一点"><a href="#懂解构赋值的你，可以再简化一点" class="headerlink" title="懂解构赋值的你，可以再简化一点"></a>懂解构赋值的你，可以再简化一点</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">8</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;66&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> [...new <span class="built_in">Set</span>(arr)]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(arr));</span><br></pre></td></tr></table></figure><blockquote><p>想了解一下解构赋值的也可以先康康这个：<a href="https://blog.wangez.site/posts/1586874348.html/">解构运算符的理解与运用 </a></p><p>之前学习，记录的笔记🎨</p></blockquote><h4 id="继续优秀下去（箭头函数）"><a href="#继续优秀下去（箭头函数）" class="headerlink" title="继续优秀下去（箭头函数）"></a>继续优秀下去（箭头函数）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">8</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;66&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> unique = <span class="function">(<span class="params">arr</span>) =&gt;</span> [...new <span class="built_in">Set</span>(arr)]</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr));</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>从最开始的好几行代码，到最后利用箭头函数，可以一行就写完，足以见得，JavaScript是在逐渐变得更好。</p><p>那我们，作为开发者，也要努力学习，才能更好的去使用这门语言呀🎈</p><blockquote><p>学无止境，不是说说而已。</p><p>点个赞，我们一起学习进步吧~</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这应该是一个很常见的问题了，既然是常见的，那我们就更应该来学习一下！&lt;/p&gt;
&lt;h2 id=&quot;开始研究&quot;&gt;&lt;a href=&quot;#开始研究&quot; class=&quot;headerlink&quot; title=&quot;开始研究&quot;&gt;&lt;/a&gt;开始研究&lt;/h2&gt;&lt;h3 id=&quot;原始&quot;&gt;&lt;a href=&quot;#原始&quot; class=&quot;headerlink&quot; title=&quot;原始&quot;&gt;&lt;/a&gt;原始&lt;/h3&gt;&lt;p&gt;数组去重，最开始我的思路是这样：定义一个新数组，完后两层for循环，如果数据第一次出现，就push到新数组里，如果重复就break掉，利用j的值与res长度相等这一点来判断数据唯一，最后返回新数组就行了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaScript" scheme="https://wangenze267.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>都2021年了，节流是不是也应该了解一下了</title>
    <link href="https://wangenze267.github.io/posts/335803086.html/"/>
    <id>https://wangenze267.github.io/posts/335803086.html/</id>
    <published>2021-09-29T10:44:42.000Z</published>
    <updated>2021-10-11T05:22:56.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天发了有关防抖的文章，很多人都问为啥节流不一起写了呢？这当然是因为昨天那个是上实验课摸鱼写的，节流不没摸出来嘛，嘿嘿。</p><p>不过不要慌，节流，它来了！</p><p>个人理解：节流的作用与防抖相似，都是为了限制事件的频繁触发。</p><span id="more"></span><h2 id="如何实现节流"><a href="#如何实现节流" class="headerlink" title="如何实现节流"></a>如何实现节流</h2><p>实现节流，就要先了解节流的原理。</p><p>节流就是，在一定的时间内，只执行一次事件。</p><p>或者说是，每隔一段时间，只执行一次事件。</p><blockquote><p>要与防抖做一下区分哦~</p><p>防抖是，不管你触发了几次，我只看你最后触发的那一次，并且在若干时间后去执行此次事件。</p></blockquote><p>我了解到的节流，有两种方式，分别是<strong>时间戳</strong>与<strong>定时器</strong>。</p><p>那么我们来实现一下看看吧~</p><h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><p>使用时间戳，当触发事件的时候，我们记录当前的时间戳，然后减去之前记录的时间戳(最一开始值一定不要忘了设为 0 )，如果大于设置的时间周期(也就是那个间隔的时间段)，就执行函数，然后更新时间戳为当前的时间戳，如果小于，就不执行。</p><p>看完是不是觉得很简单？那我们来写一下。</p><blockquote><p>具体的例子还是使用防抖的那个，懒得再写一个啦，嘿嘿~   将防抖函数换成节流就可</p><p>防抖文章链接：<a href="https://blog.wangez.site/posts/647457095.html">都2021年了，不会还有人不知道防抖吧？</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">todo, time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">if</span> (now - pre &gt; time) &#123;</span><br><span class="line">            todo.apply(that);</span><br><span class="line">            pre = now;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的话还是跟之前相同：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btn.onclick = throttle(shake,<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>为什么设置3000，当然想让效果看起来明显一些，下面来看看效果吧：</p><p><img src="/posts/335803086.html/%E6%97%B6%E9%97%B4%E6%88%B3%E8%8A%82%E6%B5%81.gif"></p><p>好了好了，别在心里数123了，我们接着往下来。</p><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>当触发事件的时候，我们设置一个定时器，再触发事件的时候，如果定时器存在，就不执行，直到定时器执行，然后执行函数，清空定时器，这样就可以设置下个定时器。</p><p>上代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">todo, time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeout,that;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        that = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">            timeout = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                timeout = <span class="literal">null</span>;</span><br><span class="line">                todo.apply(that)</span><br><span class="line">            &#125;, time)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看效果：</p><p><img src="/posts/335803086.html/%E5%AE%9A%E6%97%B6%E5%99%A8%E8%8A%82%E6%B5%81.gif"></p><p>可以看出，它是过了3s才生效的，但是不知道为什么，这种方式给我的体验感不是很好，可能是因为不是点击的下一刻就有了反馈吧~</p><blockquote><p>这块要加上一个过渡动画，是不是会好很多？</p></blockquote><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>既然有两种方法，那就要说一下他们的区别。</p><p>第一种：在例子中可以清楚的看到，点击触发后立即有反馈（执行第一次），连续触发直到过了等待时间才会进行下一次执行，停止触发就不会执行。</p><p>第二种：过了等待时间才会执行第一次，停止触发还会执行一次。</p><p>在网上看到了这样的形容词：<strong>有头无尾，和无头有尾</strong>，是不是很形象。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>啊，终于结束了！还是那句话，可能我想到的或者写的不是很完善，希望大家能够指出，我会及时更正哒。</p><blockquote><p>要是以后的我觉得某处可以优化，也会回来更新的！</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;昨天发了有关防抖的文章，很多人都问为啥节流不一起写了呢？这当然是因为昨天那个是上实验课摸鱼写的，节流不没摸出来嘛，嘿嘿。&lt;/p&gt;
&lt;p&gt;不过不要慌，节流，它来了！&lt;/p&gt;
&lt;p&gt;个人理解：节流的作用与防抖相似，都是为了限制事件的频繁触发。&lt;/p&gt;</summary>
    
    
    
    
    <category term="ES6" scheme="https://wangenze267.github.io/tags/ES6/"/>
    
    <category term="JavaScript" scheme="https://wangenze267.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>都2021年了，你还不会防抖吗？</title>
    <link href="https://wangenze267.github.io/posts/647457095.html/"/>
    <id>https://wangenze267.github.io/posts/647457095.html/</id>
    <published>2021-09-28T08:12:44.000Z</published>
    <updated>2021-10-11T05:23:00.636Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我们写项目遇到不听话的用户的时候，例如一个登录按钮，他就偏偏要反复点好几次，调用了<code>/login</code>接口好多次，是不是很烦？</p><p>因为涉及到ajax请求，就会有这样的情况，假设 1 秒触发了 60 次，每个回调就必须在 1000 / 60 = 16.67ms 内完成，否则就会有卡顿出现。</p><p>那么只有请求需要写防抖吗？</p><p>当然不是，凡是（可能）涉及到频繁事件触发的地方，都需要写防抖。</p><span id="more"></span><blockquote><ol><li>window 的 resize、scroll</li><li>mousedown、mousemove</li><li>keyup、keydown</li><li>click事件</li><li>……</li></ol></blockquote><p>我们简单的写一个小demo，看一下没有防抖跟有防抖的效果。</p><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html</span></span><br><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span> onclick=<span class="string">&quot;shake()&quot;</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span>点击我<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;container&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shake</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    container.innerHTML = count++;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p><img src="/posts/647457095.html/%E6%9C%AA%E9%98%B2%E6%8A%96.gif"></p><hr><h2 id="如何实现防抖"><a href="#如何实现防抖" class="headerlink" title="如何实现防抖"></a>如何实现防抖</h2><p>实现防抖，就要了解防抖的原理。</p><p>防抖就是，不管你触发了几次，我只看你最后触发的那一次，并且在若干时间后去执行此次事件。</p><p>根据这个原理，我们可以写出这段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preventShake</span>(<span class="params">todo,time</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> timeout;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout)</span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(todo, time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置一个延迟操作的事件，并且如果再次触发就把之前的延迟取消掉，重新进入计时。</p><p>将它运用在刚刚的例子上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;container&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shake</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    container.innerHTML = count++;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preventShake</span>(<span class="params">todo,time</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeout;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(todo, time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">btn.onclick = preventShake(shake,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><hr><p><img src="/posts/647457095.html/%E9%98%B2%E6%8A%96%E6%9C%AA%E4%BC%98%E5%8C%96.gif"></p><hr><p>我们已经实现了基础的它，那么我们继续优化一下吧！</p><h2 id="this指向优化"><a href="#this指向优化" class="headerlink" title="this指向优化"></a>this指向优化</h2><p>看似上面的结果没有什么太大问题，但是我们打印一下原先的<code>shake</code>和使用了<code>preventShake</code>后的this就会知道，他们指向的并不是一个东西。</p><ul><li><p>原先指向的是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span>点击我<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用了<code>preventShake</code>后this指向的是<strong>Window</strong>对象！</p></li></ul><p>于是我们要加一步，就是改变this指向。</p><blockquote><p>欸，这个是不是又是一篇文章？？</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preventShake</span>(<span class="params">todo,time</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeout;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            todo.apply(that);</span><br><span class="line">        &#125;, time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就解决了this指向可能带来的问题。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>至此，这个简易的防抖函数就写完了，可能我想的还不太完善，希望大家给予建议，我也会及时学习，之后将其完善，争取做的更好。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在我们写项目遇到不听话的用户的时候，例如一个登录按钮，他就偏偏要反复点好几次，调用了&lt;code&gt;/login&lt;/code&gt;接口好多次，是不是很烦？&lt;/p&gt;
&lt;p&gt;因为涉及到ajax请求，就会有这样的情况，假设 1 秒触发了 60 次，每个回调就必须在 1000 / 60 = 16.67ms 内完成，否则就会有卡顿出现。&lt;/p&gt;
&lt;p&gt;那么只有请求需要写防抖吗？&lt;/p&gt;
&lt;p&gt;当然不是，凡是（可能）涉及到频繁事件触发的地方，都需要写防抖。&lt;/p&gt;</summary>
    
    
    
    
    <category term="ES6" scheme="https://wangenze267.github.io/tags/ES6/"/>
    
    <category term="JavaScript" scheme="https://wangenze267.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>快速了解ES6模块化少不了这篇文章</title>
    <link href="https://wangenze267.github.io/posts/3892826279.html/"/>
    <id>https://wangenze267.github.io/posts/3892826279.html/</id>
    <published>2021-09-27T08:04:47.960Z</published>
    <updated>2021-10-11T05:21:43.196Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在之前的JavaScript中是没有模块化概念的，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。如果要进行模块化操作，就需要引入第三方的类库。随着技术的发展，前后端分离，前端的业务变的越来越复杂化，于是才有了ES6模块化的诞生。</p><p>为什么要有模块化，或者模块化的好处是什么呢？</p><blockquote><p> 大家都遵守同样的模块化规范写代码，降低了沟通的成本，极大方便了各个模块间的相互调用，利人利己。</p><p> 可以将一段复杂的程序拆解开来，方便维护可拓展。</p></blockquote><span id="more"></span><h2 id="前端模块化规范"><a href="#前端模块化规范" class="headerlink" title="前端模块化规范"></a>前端模块化规范</h2><p>在<strong>ES6模块化</strong>诞生之前，JavaScript社区尝试并提出了<strong>AMD、CMD、commonJS</strong>等模块化规范。</p><p>但是，这些模块化规范，存在一定的差异性与局限性，并不能通用。</p><p>例如：</p><ul><li><p>AMD和CMD适用于浏览器端的JavaScript模块化</p></li><li><p>commonJS适用于服务器端的JavaScript模块化</p><blockquote><p>Node.js 就是遵循的这个规范</p><p>导入其它模块使用require()</p><p>导出使用module.exports对象</p></blockquote></li></ul><p>太多的模块化规范给开发者增加了学习的难度与开发的成本。所以，ES6模块化规范诞生了！</p><h3 id="什么是ES6模块化规范"><a href="#什么是ES6模块化规范" class="headerlink" title="什么是ES6模块化规范"></a>什么是ES6模块化规范</h3><p>ES6模块化规范是浏览器端与服务端通用的模块化开发规范。它的出现极大的降低了前端开发者的模块化学习成本，开发者不需要在额外学习AMD、CMD或者commonJS等模块化规范。</p><p>ES6中模块化规范中定义：</p><ul><li>每个js文件都是一个独立的模块</li><li>导入其他模块成员使用<code>import</code>关键字</li><li>向外共享模块成员使用<code>export</code>关键字</li></ul><h2 id="在node-js中体验ES6模块化"><a href="#在node-js中体验ES6模块化" class="headerlink" title="在node.js中体验ES6模块化"></a>在node.js中体验ES6模块化</h2><p>node.js中默认仅支持commonJS模块化规范，若想在node中进行体验，要按照如下两步骤进行配置：</p><ul><li><p>确保安装了<code>v14.15.1</code>或者更高版本的node.js</p><blockquote><p>可以使用在cmd窗口中使用<code>node -v</code>命令查看当前版本号哦~</p></blockquote></li><li><p>在package.json的根节点中添加<code>&quot;type&quot;:&quot;module&quot;</code>节点</p><blockquote><p>不知道如何添加的小伙伴看这里：</p><p>首先我们要在一个空文件夹内，执行<code>npm init -y</code>，这时候我们就能看见已经自动生成了<code>package.json</code>文件了</p><p>完后在vs-code打开，在内添加<code>&quot;type&quot;:&quot;module&quot;</code>节点即可</p><p>小提示：type值默认为commonJS，所以我们平时node遵循的模块化规范都是commonJS</p></blockquote></li></ul><h2 id="ES6模块化的基本语法"><a href="#ES6模块化的基本语法" class="headerlink" title="ES6模块化的基本语法"></a>ES6模块化的基本语法</h2><p>ES6的模块化主要包含如下3种用法：</p><ul><li>默认导出与默认导入</li><li>按需导出与按需导入</li><li>直接导入并执行模块中的代码</li></ul><h3 id="默认导出"><a href="#默认导出" class="headerlink" title="默认导出"></a>默认导出</h3><p>语法：<code>export default</code> <font color="nred">默认导出的成员</font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n1 = <span class="number">10</span> <span class="comment">// 定义模块私有成员 n1</span></span><br><span class="line"><span class="keyword">let</span> n2 = <span class="number">20</span> <span class="comment">// 定义模块私有成员 n2 因为没有共享出去，所以外界访问不到</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;  <span class="comment">// 定义模块私有方法 show</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; <span class="comment">// 使用export default 默认导出语法 向外共享n1 和 show 两个成员</span></span><br><span class="line">n1,</span><br><span class="line">    show</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><p>每个模块中，只允许用唯一的一次 <code>export default</code>，否则会报错！</p><h3 id="默认导入"><a href="#默认导入" class="headerlink" title="默认导入"></a>默认导入</h3><p>语法：<code>import</code><font color="nred">接收名称</font><code>form</code><font color="nred">模块标识符</font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 m1.js 模块中导入 export default 向外共享的成员</span></span><br><span class="line"><span class="comment">// 并使用 m1 进行接收</span></span><br><span class="line"><span class="keyword">import</span> m1 form <span class="string">&#x27;./m1.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(m1)</span><br><span class="line"><span class="comment">// 输出为: &#123; n1: 10, show: [Function:show]&#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><p>默认导入的时候，接收名字可以任意写，注意是合法的成员名称就行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// m1 合法 不报错</span></span><br><span class="line"><span class="keyword">import</span> m1 form <span class="string">&#x27;./m1.js&#x27;</span></span><br><span class="line"><span class="comment">// 成员名称不能用数字开头，所以会直接报错</span></span><br><span class="line"><span class="keyword">import</span> <span class="number">123</span> form <span class="string">&#x27;./m1.js&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="按需导出"><a href="#按需导出" class="headerlink" title="按需导出"></a>按需导出</h3><p>语法：<code>export</code><font color="nred">按需导出的成员</font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向外按需导出变量 s</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> s = <span class="string">&#x27;Ned&#x27;</span></span><br><span class="line"><span class="comment">// 向外按需导出方法 show</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="按需导入"><a href="#按需导入" class="headerlink" title="按需导入"></a>按需导入</h3><p>语法：<code>import &#123;s&#125; from</code><font color="nred">模块标识符 </font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; s, show &#125; form <span class="string">&#x27;./m1.js&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(s) <span class="comment">// Ned</span></span><br><span class="line"><span class="built_in">console</span>.log(show) <span class="comment">// [Function: show]</span></span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ul><li>每个模块中可以使用多次按需导出</li><li>按需导入的成员名称必须跟按需导出的名称一致</li><li>按需导入时，可以使用<code>as</code>关键字进行重命名</li><li>按需导入可以和默认导入一起使用</li></ul><p>重命名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; s <span class="keyword">as</span> str &#125; form <span class="string">&#x27;./m1.js&#x27;</span></span><br></pre></td></tr></table></figure><p>使用as关键字，将s重命名为str，所以接下来我们使用str就好了，不能再使用s这个名字。</p><p>按需导入和默认导入一起使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> info,&#123; s <span class="keyword">as</span> str &#125; form <span class="string">&#x27;./m1.js&#x27;</span></span><br></pre></td></tr></table></figure><p>info就是默认导入，后面带大括号的就是按需导入。</p><h3 id="直接导入并执行模块中的代码"><a href="#直接导入并执行模块中的代码" class="headerlink" title="直接导入并执行模块中的代码"></a>直接导入并执行模块中的代码</h3><p>如果只想单纯的执行某个模块中的代码，并不需要得到其内部向外共享的成员，可以这样做：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// m1.js:</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line">-------------------------</span><br><span class="line"><span class="comment">// 直接导入并执行模块中的代码</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./m1.js&#x27;</span></span><br></pre></td></tr></table></figure><p>没错，就是直接导入即可。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这篇文章简单介绍一下模块化的概念和语法，过几天我还会出一篇文章来告诉大家模块化在实际应用里是如何使用的。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在之前的JavaScript中是没有模块化概念的，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。如果要进行模块化操作，就需要引入第三方的类库。随着技术的发展，前后端分离，前端的业务变的越来越复杂化，于是才有了ES6模块化的诞生。&lt;/p&gt;
&lt;p&gt;为什么要有模块化，或者模块化的好处是什么呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 大家都遵守同样的模块化规范写代码，降低了沟通的成本，极大方便了各个模块间的相互调用，利人利己。&lt;/p&gt;
&lt;p&gt; 可以将一段复杂的程序拆解开来，方便维护可拓展。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="ES6" scheme="https://wangenze267.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>什么？你还不知道Symbol？</title>
    <link href="https://wangenze267.github.io/posts/2670144936.html/"/>
    <id>https://wangenze267.github.io/posts/2670144936.html/</id>
    <published>2021-09-25T05:25:19.000Z</published>
    <updated>2021-10-11T05:25:01.908Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>ES6引入了一种新的原始数据类型<code>Symbol</code>表示独一无二的值。它是JavaScript语言的第七种数据类型，是一种类似于字符串的数据类型。</p><h3 id="Symbol的特点"><a href="#Symbol的特点" class="headerlink" title="Symbol的特点"></a>Symbol的特点</h3><ul><li>Symbol的值是唯一的，用来解决命名冲突的问题</li><li>Symbol值不能与其他数据进行运算</li><li>Symbol定义的对象属性不能使用<code>for...in</code>循环遍历，但是可以使用<code>Reflect.ownKeys</code>来获取对象的所有键名</li></ul><span id="more"></span><h3 id="创建Symbol的两种方式"><a href="#创建Symbol的两种方式" class="headerlink" title="创建Symbol的两种方式"></a>创建Symbol的两种方式</h3><h4 id="创建Symbol"><a href="#创建Symbol" class="headerlink" title="创建Symbol"></a>创建Symbol</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Symbol</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">console</span>.log(s, <span class="keyword">typeof</span> s); <span class="comment">// Symbol() &#x27;symbol&#x27;</span></span><br></pre></td></tr></table></figure><p>打印出来的数据跟想象中是不是不一样？是不是觉得<code>s</code>应该是一个很长的东西？这是因为它的唯一性在这里是不可见的，所以我们才看不见。</p><p>不要慌，继续往下看，我们继续创建Symbol。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;Ned&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s3 = <span class="built_in">Symbol</span>(<span class="string">&#x27;Ned&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s2 === s3); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>我们现在传入了两个字符串，想看看返回的值是不是一样的，发现是不一样的。</p><blockquote><p>我的理解：<br>虽然传入两个字符串内容一样，但是他们的编号未必一样，啊不，应该是一定不一样。</p></blockquote><h4 id="使用Symbol-for创建Symbol"><a href="#使用Symbol-for创建Symbol" class="headerlink" title="使用Symbol.for创建Symbol"></a>使用Symbol.for创建Symbol</h4><p>这样创建的Symbol是一个对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s4 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;Ned&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s4, <span class="keyword">typeof</span> s4); <span class="comment">// Symbol(Ned) &#x27;symbol&#x27;</span></span><br></pre></td></tr></table></figure><p>通过<code>Symbol.for</code>创建的，我们可以通过传入同一字符串来得到唯一的symbol值的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s4 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;Ned&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s5 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;Ned&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s4 === s5); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="【强调】Symbol值不能与其他数据进行运算"><a href="#【强调】Symbol值不能与其他数据进行运算" class="headerlink" title="【强调】Symbol值不能与其他数据进行运算"></a>【强调】Symbol值不能与其他数据进行运算</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> b = a + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> c = a + <span class="string">&#x27;100&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这都是不行的，会直接在浏览器中报错。</p><h3 id="Symbol的基本使用"><a href="#Symbol的基本使用" class="headerlink" title="Symbol的基本使用"></a>Symbol的基本使用</h3><blockquote><p>symbol的使用场景就是给对象加属性或者方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> game = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;石头剪刀布&#x27;</span>，</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">up</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;这是up函数&#x27;</span>);</span><br><span class="line">    &#125;，</span><br><span class="line">    <span class="attr">down</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;这是down函数&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在有一个对象<code>game</code>,我们想往里添加两个方法，分别是<code>up</code>和<code>down</code>，但是我们不清楚现在对象中是否已经具有<code>up</code>和<code>down</code>两个方法，按照以往的方法，我们是不是应该打开这个对象，去里面一一查找是否具有这两个方法，如果找到了，我们是不是就应该换个名字，如果没找到，我们就可以向内添加方法，但是这个对象结构简单还好，如果稍微复杂一点的话，这个操作就会非常复杂，会耗费许多时间。</p><p>在这种应用场景下，我们就应该应用<code>Symbol</code>来创建唯一值，完成这个需求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个method对象</span></span><br><span class="line"><span class="keyword">let</span> methods = &#123;</span><br><span class="line">    <span class="attr">up</span>: <span class="built_in">Symbol</span>(),</span><br><span class="line">    <span class="attr">down</span>: <span class="built_in">Symbol</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 向game对象中，注入方法</span></span><br><span class="line">game[methods.up] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我要上升！&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">game[methods.down] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我要下降！&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用这样的方式，给<code>game</code>对象添加方法，是不会破坏<code>game</code>原有的一些属性的，是非常安全快速的。</p><p>下面我们打印一下<code>game</code>对象，看一下他内部是什么样子的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name: <span class="string">&quot;石头剪刀布&quot;</span></span><br><span class="line"><span class="attr">down</span>: f()</span><br><span class="line"><span class="attr">up</span>: f()</span><br><span class="line"><span class="built_in">Symbol</span>(): f()</span><br><span class="line"><span class="built_in">Symbol</span>(): f()</span><br></pre></td></tr></table></figure><p>可以看到，多出了两个Symbol函数，没有对原函数造成影响。</p><h3 id="数据类型小诀窍"><a href="#数据类型小诀窍" class="headerlink" title="数据类型小诀窍"></a>数据类型小诀窍</h3><p>送大家一个记住JavaScript数据类型的小诀窍</p><p>共八种</p><blockquote><p><strong>USONB: you are so niu bility</strong> </p><p><strong>U: undefined</strong></p><p><strong>S: string  symbol</strong></p><p><strong>O: object</strong></p><p><strong>N: null  number</strong></p><p><strong>B: boolean  bigint</strong></p></blockquote><blockquote><p><strong>想顺便复习数据类型的话也可以看我的这篇文章：<a href="https://blog.wangez.site/posts/2884264051.html/#more">一文带你了解JavaScript的数据类型</a></strong></p></blockquote><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>希望总结的这些知识可以让大家对symbol类型的数据有一个简单的了解。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;ES6引入了一种新的原始数据类型&lt;code&gt;Symbol&lt;/code&gt;表示独一无二的值。它是JavaScript语言的第七种数据类型，是一种类似于字符串的数据类型。&lt;/p&gt;
&lt;h3 id=&quot;Symbol的特点&quot;&gt;&lt;a href=&quot;#Symbol的特点&quot; class=&quot;headerlink&quot; title=&quot;Symbol的特点&quot;&gt;&lt;/a&gt;Symbol的特点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Symbol的值是唯一的，用来解决命名冲突的问题&lt;/li&gt;
&lt;li&gt;Symbol值不能与其他数据进行运算&lt;/li&gt;
&lt;li&gt;Symbol定义的对象属性不能使用&lt;code&gt;for...in&lt;/code&gt;循环遍历，但是可以使用&lt;code&gt;Reflect.ownKeys&lt;/code&gt;来获取对象的所有键名&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="ES6" scheme="https://wangenze267.github.io/tags/ES6/"/>
    
    <category term="JavaScript" scheme="https://wangenze267.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>关于JavaScript的数据类型（2021.9.23更新）</title>
    <link href="https://wangenze267.github.io/posts/2884264051.html/"/>
    <id>https://wangenze267.github.io/posts/2884264051.html/</id>
    <published>2021-09-20T10:06:48.401Z</published>
    <updated>2021-10-11T05:25:14.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>二刷JavaScript高级了，上一次是刷的黑马pink老师的课程，这次刷的是尚硅谷的课程，都是B站的课程，对课程进行了些许总结。</p><p>可能是课程有些老的原因，例如视频中仅有5个基本类型，但是目前好像是有7种。</p><p>所以结合之前所学的一些知识，对内容进行了补充。</p><p><em>如有错误，还望指正。</em></p><span id="more"></span><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="基本（值）类型"><a href="#基本（值）类型" class="headerlink" title="基本（值）类型"></a>基本（值）类型</h3><ul><li>String：任意字符串</li><li>Number：任意的数字</li><li>boolean：true  /  false</li><li>undefined：undefined</li><li>null：null</li><li>bigInt：可以用任意精度表示整数</li><li>symbol：符号类型是唯一的并且是不可修改的，通常用来作为object的key</li></ul><h3 id="引用（对象）类型"><a href="#引用（对象）类型" class="headerlink" title="引用（对象）类型"></a>引用（对象）类型</h3><ul><li>Object：任意对象</li><li>Function：一种特别的对象（可以执行）</li><li>Array：一种特别的对象（数值下标，内部数据是有序的）</li></ul><h2 id="如何判断数据类型"><a href="#如何判断数据类型" class="headerlink" title="如何判断数据类型"></a>如何判断数据类型</h2><p>三种方法：</p><ul><li><p>typeof</p><blockquote><p>typeof返回数据类型的字符串表达  </p><p>注：可以判断undefined、数值、boolean、字符串，不能判断null与object object与array</p></blockquote></li><li><p>instanceof</p><blockquote><p>判断对象的具体类型</p></blockquote></li><li><p>===</p><blockquote><p>注：可以判断undefined，null</p></blockquote></li></ul><h3 id="判断基本类型"><a href="#判断基本类型" class="headerlink" title="判断基本类型"></a>判断基本类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a</span><br><span class="line"><span class="built_in">console</span>.log(a,<span class="keyword">typeof</span> a,<span class="keyword">typeof</span> a === <span class="string">&#x27;undefined&#x27;</span>,a === <span class="literal">undefined</span>) <span class="comment">// undefined &#x27;undefined&#x27; true true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> === <span class="string">&#x27;undefined&#x27;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a</span><br><span class="line">a = <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a === <span class="string">&#x27;number&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">a = <span class="string">&#x27;Ned&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">a = <span class="literal">true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a === <span class="string">&#x27;boolean&#x27;</span>) <span class="comment">// true </span></span><br><span class="line">a = <span class="literal">null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a, a=== <span class="literal">null</span>) <span class="comment">// object</span></span><br></pre></td></tr></table></figure><p><strong>请注意：这里string，s一定要小写，否则会是false，这是因为人家已经设计好的，是固定的。</strong></p><h3 id="判断对象类型"><a href="#判断对象类型" class="headerlink" title="判断对象类型"></a>判断对象类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b1 = &#123;</span><br><span class="line">    <span class="attr">b2</span>: [a,<span class="string">&#x27;abc&#x27;</span>,<span class="built_in">console</span>.log]</span><br><span class="line">    <span class="attr">b3</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;b3&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体的 b1 是个对象，b2 是数组， b3 是函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(b1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>, b1 <span class="keyword">instanceof</span> <span class="built_in">Array</span>) <span class="comment">// true false</span></span><br><span class="line"><span class="built_in">console</span>.log(b1.b2 <span class="keyword">instanceof</span> <span class="built_in">Array</span>, b1.b2 <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="comment">// true true</span></span><br><span class="line"><span class="built_in">console</span>.log(b1.b3 <span class="keyword">instanceof</span> <span class="built_in">Function</span>, b1.b3 <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="comment">// true true</span></span><br></pre></td></tr></table></figure><blockquote><p>标注一下 instance of 的用法</p><p>[实例] instanceof [类]</p><p>如果这个实例是类的实例，就返回true，反之返回false</p></blockquote><p>也就是说，我们判断对象类型，要用instanceof。</p><p>另：判断<code>function</code>还可以用<code>typeof</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b1.b3 === <span class="string">&#x27;function&#x27;</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p> 不知道大家有没有注意，b2的第三个值我们写了个console.log，下面我们也来判断一下它，应该是个function的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b1.b2[<span class="number">2</span>] === <span class="string">&#x27;function&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>所以我们要调用这个函数的时候可以直接<code>b1.b2[2]()</code>，这里提醒大家，我们千万不要被<code>b1.b2[2]</code>所迷惑，我们要清楚它的数据类型到底是什么。</p><p>就此情况，我们上面b1中的b3改写一下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b1 = &#123;</span><br><span class="line">    <span class="attr">b3</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(b3)</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Ned&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们想要得到<code>&#39;Ned&#39;</code>，应该怎么做？</p><p>只需要调用这个返回过来的函数即可：<code>b1.b3()()</code>，输出一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(b1.b3()())</span><br></pre></td></tr></table></figure><p>所以不要拘泥于表面现象，一定要看清楚得到的是什么类型的数据，才能进行下一步的操作！</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="手写instanceof"><a href="#手写instanceof" class="headerlink" title="手写instanceof"></a>手写instanceof</h3><p>想要手写，我们首要的就是要了解它的原理。</p><p>原理：验证当前类的原型prototype是否会出现在实例的原型链<strong>proto</strong>上，只要在它的原型链上，则结果都为true。因此，<code>instanceof</code>在查找的过程中会遍历左边变量的原型链，直到找到右边变量的<code>prototype</code>，找到返回true，找不到返回false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myinstanceOf</span>(<span class="params">left,right</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> proto = left.__proto__</span><br><span class="line">    <span class="keyword">let</span> prototype = right.prototype</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(proto == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(proto == prototype)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        proto = proto.__proto__</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="constructor（用于引用数据类型）"><a href="#constructor（用于引用数据类型）" class="headerlink" title="constructor（用于引用数据类型）"></a>constructor（用于引用数据类型）</h3><ul><li>语法： 被检测数据.constructor === class</li><li>特点：<ul><li>适合使用在引用数据类型上</li><li>原型链不会干扰</li></ul></li><li>原理：构造函数原型上有一个 constructor 属性指向构造函数自身的，如果在实例上使用 construtor 时，就会直接使用其构造函数原型的上的该属性，并指向其构造函数。</li></ul><h3 id="Object-prototype-toString-call-（对象原型链判断方法）"><a href="#Object-prototype-toString-call-（对象原型链判断方法）" class="headerlink" title="Object.prototype.toString.call()（对象原型链判断方法）"></a>Object.prototype.toString.call()（对象原型链判断方法）</h3><ul><li>语法：Object.prototype.toString.call(被检测数据)   </li><li>特点：适用于所有类型的判断检测</li><li>原理：Object.prototype.toString 表示一个返回对象类型的字符串，call()方法可以改变this的指向，那么把Object.prototype.toString()方法指向不同的数据类型上面，返回不同的结果</li></ul><h2 id="补充，相关问题（2021-9-23）"><a href="#补充，相关问题（2021-9-23）" class="headerlink" title="补充，相关问题（2021.9.23）"></a>补充，相关问题（2021.9.23）</h2><h3 id="undefined与null的区别？"><a href="#undefined与null的区别？" class="headerlink" title="undefined与null的区别？"></a>undefined与null的区别？</h3><ul><li>undefined表示定义未赋值</li><li>null表示定义并赋值了，只是值为null</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// undefined</span></span><br><span class="line">a = <span class="literal">null</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// null</span></span><br></pre></td></tr></table></figure><h3 id="什么时候给变量赋值为null呢？"><a href="#什么时候给变量赋值为null呢？" class="headerlink" title="什么时候给变量赋值为null呢？"></a>什么时候给变量赋值为null呢？</h3><ul><li>初始赋值，表明将要赋值为对象</li><li>结束前，让对象成为垃圾对象，被回收掉。</li></ul><p>不知道大家是否还记得，typeof 一个null的时候，返回的是什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a) <span class="comment">// object</span></span><br></pre></td></tr></table></figure><p>没错，是object。</p><p>所以当我们将一个变量的初始值赋值为null的时候，我们是向其他程序员表明，这个变量将会被赋值为对象。</p><blockquote><p>不这么做行不行？ 当然可以。</p><p>那为什么还要这么做？</p><p>当然是因为，编程也是很严谨的。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="literal">null</span> <span class="comment">// 初始赋值为null，表明将要赋值为对象</span></span><br><span class="line">b = [<span class="string">&#x27;Ned&#x27;</span>,<span class="number">20</span>] <span class="comment">// 确定对象就赋值</span></span><br><span class="line">b = <span class="literal">null</span> <span class="comment">// 最后，让b指向的对象成为垃圾对象（被垃圾回收器回收）</span></span><br></pre></td></tr></table></figure><h3 id="严格区别变量类型与数据类型"><a href="#严格区别变量类型与数据类型" class="headerlink" title="严格区别变量类型与数据类型"></a>严格区别变量类型与数据类型</h3><ul><li>数据的类型<ul><li>基本类型</li><li>对象类型</li></ul></li></ul><ul><li>变量的类型（变量内存值的类型）<ul><li>基本类型：保存就是基本类型的数据</li><li>引用类型：保存的是地址值</li></ul></li></ul><p>平时的时候我们不会去区分这个概念（要不是视频里看见了我都不知道:crying_cat_face:）。</p><p>简单的了解到这个概念就行吧~。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = fuction ()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;这是一个函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a) <span class="comment">// function</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;二刷JavaScript高级了，上一次是刷的黑马pink老师的课程，这次刷的是尚硅谷的课程，都是B站的课程，对课程进行了些许总结。&lt;/p&gt;
&lt;p&gt;可能是课程有些老的原因，例如视频中仅有5个基本类型，但是目前好像是有7种。&lt;/p&gt;
&lt;p&gt;所以结合之前所学的一些知识，对内容进行了补充。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;如有错误，还望指正。&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaScript" scheme="https://wangenze267.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>webpack基础认识</title>
    <link href="https://wangenze267.github.io/posts/3206731080.html/"/>
    <id>https://wangenze267.github.io/posts/3206731080.html/</id>
    <published>2021-09-16T12:31:24.719Z</published>
    <updated>2021-10-11T05:27:21.941Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>webpack在框架中多半被脚手架所集成，例如vue中的vue-cli，但是在面试中，还是会被问到，所以我们还是要了解一些必要知识，能让我们对此类技术有一个更深的认识。</p><p>不得不说，在学习过程中，我了解到了许多我之前仅仅知道那是配置文件的东西，但是经过学习了解之后，已经可以知道哪些配置是为了什么目的的了。</p><blockquote><p>古人云：学吧，学会了都是你的~</p><p>古人又云：学吧，学不死就往死里学！</p></blockquote><p><em>注：本文为摘录笔记，供学习使用。</em></p><span id="more"></span><h3 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack"></a>什么是webpack</h3><p>可能大家了解的，百度搜到的，webpack是一个<strong>模块打包器</strong>。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。</p><p>还有另一种说法：webpack是<strong>前端项目工程化的具体解决方案</strong></p><p>主要功能：它提供了友好的<strong>前端模块化</strong>开发支持，以及<strong>代码压缩混淆、处理浏览器端JavaScript的兼容性、性能优化</strong>等强大的功能。</p><blockquote><ul><li>代码压缩混淆是为了缩减文件体积，让网页打开更迅速</li><li>程序员可以放心大胆写js高级语法，webpack在具体浏览器运行的时候会有转换过程，将高级的转换成低级，没有兼容问题的代码，去浏览器里跑。</li><li>css3动画，浏览器不兼容是不会显示的，不会报错，效果出不来</li><li>js，如果低版本浏览器不兼容的话，浏览器会报错</li><li>webpack目前有一些现有的成熟的兼容方案</li></ul></blockquote><p>好处：让 程序员把<strong>工作重心</strong>放到具体功能的实现上，提高了前端<strong>开发效率</strong>和项目的<strong>可维护性</strong>。</p><h3 id="webpack的基本使用"><a href="#webpack的基本使用" class="headerlink" title="webpack的基本使用"></a>webpack的基本使用</h3><h4 id="构建初始项目目录"><a href="#构建初始项目目录" class="headerlink" title="构建初始项目目录"></a>构建初始项目目录</h4><p>因为许多我觉得大家都会，所以在此简略一些。</p><p>①新建项目空白目录，运行<code>npm init -y</code>命令，初始化包管理配置文件<code>package.json</code></p><p>②新建<code>src</code>源代码目录</p><p>③新建src—&gt;<code>index.html</code>首页和src—&gt;<code>index.js</code>脚本文件</p><blockquote><p>下面就是初始化和引入依赖了，我随便的引入一个jq，完后瞎写了点东西，主要还是学习webpack</p></blockquote><p>④初始化首页的基本结构</p><p>⑤运行<code>npm install jquery -S</code>命令，安装jQuery</p><blockquote><p>之前是不是都是去网上下一个类似<code>jquery.min.js</code>的文件手动拉到文件夹？</p></blockquote><h4 id="在项目中安装webpack"><a href="#在项目中安装webpack" class="headerlink" title="在项目中安装webpack"></a>在项目中安装webpack</h4><p>在终端运行如下命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack@<span class="number">5.42</span><span class="number">.1</span> webpack-cli@<span class="number">4.7</span><span class="number">.2</span> -D</span><br></pre></td></tr></table></figure><blockquote><p>解释一下npm命令中-S -D的区别</p><p>开发中跟上线后部署都需要的包，要-S存到dependencies节点下</p><p>只在开发中使用的包，上线后不需要的包，要-D存到devDependencies节点下</p><p>注：-S 是 –save的简写 -D 是 –save-dev的简写</p></blockquote><h4 id="在项目中配置webpack"><a href="#在项目中配置webpack" class="headerlink" title="在项目中配置webpack"></a>在项目中配置webpack</h4><p>只安装不配置当然不会生效，所以我们还要来配置一下。</p><p>① 在项目根目录中，创建名字为<code>webpack.config.js</code>的webpack配置文件，并初始化如下的基本配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span> <span class="comment">// mode用来指定构建模式，可选值：development、production</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>module.exports  这个是不是很眼熟（Node.js的导出语法，如果对node有了解的话会知道），它的作用是向外导出一个配置对象，它是webpack的配置文件，当然，这个配置就是给webpack用的咯！</p><p>mode的两个可选值，代表着开发的不同阶段：分别是开发模式（development）跟生产模式（production）。</p><blockquote><p>生产模式也就是要上线了。</p></blockquote><p>② 在package.json的scripts节点下，新增<code>dev脚本</code>如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>:&#123;</span><br><span class="line"><span class="string">&quot;dev&quot;</span>:<span class="string">&quot;webpack&quot;</span> <span class="comment">// script 节点下的脚本，可通过npm run执行，例如npm run dev</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>&quot;dev&quot;:&quot;webpack&quot;</code>,冒号前面是这个脚本的名字，冒号后面是个命令，后面的命令必须是字符串，前面脚本的名字可以任意去写，不一定叫dev，合法就行。</p><p>③ 在终端中运行<code>npm run dev命令</code>，启动webpack进行项目的打包构建。</p><p>运行之后，会多一个<code>dist</code>目录，打开后里面有一个main.js代码。</p><p>如果你之前<code>index.js</code>的代码引入到<code>index.html</code>中，出现了兼容性问题，那么不妨引入<code>main.js</code>试试，你会发现没有任何问题，这就是<strong>webpack</strong>的在起作用了，它帮着对我们的项目进行了兼容性处理。</p><h4 id="mode的可选值"><a href="#mode的可选值" class="headerlink" title="mode的可选值"></a>mode的可选值</h4><p><strong>mode节点</strong>的可选值在上面已经说过了，有两个，分别是</p><ul><li>development<ul><li>开发环境</li><li>不会对打包生成的文件进行代码压缩和性能优化</li><li>打包速度快，适合在开发阶段使用</li></ul></li><li>production<ul><li>生产环境</li><li>会对打包生成的文件进行代码压缩和性能优化</li><li>打包速度很慢，今是何在项目发布的阶段使用</li></ul></li></ul><p><strong>结论：</strong>开发的时候我们一定要用development，因为我们追求的是速度而不是体积，反过来，发布上线的时候我们一定要用production，因为上线追求的是体积和性能，而不是打包的速度。</p><h4 id="webpack-config-js文件的作用"><a href="#webpack-config-js文件的作用" class="headerlink" title="webpack.config.js文件的作用"></a>webpack.config.js文件的作用</h4><p>webpack.config.js是webpack的配置文件。webpack在真正开始打包构建之前，会先读取这个配置文件，从而基于给定的配置，对项目进行打包。</p><p>注意：由于webpack是基于node.js开发出来的打包工具，因此在它的配置文件中，支持使用node.js相关的语法和模块进行webpack的个性化配置。</p><h4 id="webpack中的默认约定"><a href="#webpack中的默认约定" class="headerlink" title="webpack中的默认约定"></a>webpack中的默认约定</h4><p>在webpack4.x和5.x的版本中，有如下的默认约定：</p><ul><li>默认的打包入口文件为<code>src-&gt;index.js</code></li><li>默认的输出文件路径为<code>dist-&gt;main.js</code></li></ul><p>注意：可以在<code>webpack.config.js</code>中修改打包的默认约定</p><h4 id="自定义打包的入口与出口"><a href="#自定义打包的入口与出口" class="headerlink" title="自定义打包的入口与出口"></a>自定义打包的入口与出口</h4><p>在<code>webpack.config.js</code>配置文件中，通过<strong>entry</strong>节点指定打包的入口。通过<strong>output</strong>节点指定打包的出口。</p><p>示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>) <span class="comment">// 导入node.js中专门操作路径的模块</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">entry</span>: path.join(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>), <span class="comment">// 打包入口文件路径</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.join(__dirname, <span class="string">&#x27;./dist&#x27;</span>), <span class="comment">// 输出文件的存取路径</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;main .js&#x27;</span> <span class="comment">// 输出文件名称 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意： __dirname 是两个下划线！！代表这个文件的存放路径。</p></blockquote><h3 id="webpack中的插件"><a href="#webpack中的插件" class="headerlink" title="webpack中的插件"></a>webpack中的插件</h3><blockquote><p>方便程序员的开发</p></blockquote><p>通过安装和配置第三方的插件，可以拓展webpack的能力，从而让webpack用起来方便。最常用的webpack插件有如下两个：</p><ul><li>webpack-dev-server<ul><li>类似于node.js阶段用到的nodemon工具</li><li>每当修改了源代码，webpack会自动进行项目的打包和构建</li></ul></li><li>html-webpack-plugin<ul><li>webpack中的HTML插件（类似于一个模板引擎插件）</li><li>可以通过此插件自定制index.html页面内容</li></ul></li></ul><h4 id="安装webpack-dev-server"><a href="#安装webpack-dev-server" class="headerlink" title="安装webpack-dev-server"></a>安装webpack-dev-server</h4><p>运行如下命令：</p><p><code>npm install webpack-dev-server@3.11.2 -D</code></p><blockquote><p>-D，上面有讲过，他只是在开发阶段使用的工具，并不是上线部署的时候需要的。</p></blockquote><h4 id="配置webpack-dev-server"><a href="#配置webpack-dev-server" class="headerlink" title="配置webpack-dev-server"></a>配置webpack-dev-server</h4><ul><li><p>修改<code>package.json--&gt;scripts</code>中的<code>dev</code>命令如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>:&#123;</span><br><span class="line"><span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack serve&quot;</span>, <span class="comment">// script 节点下的脚本，可以通过npm run 执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>serve是一个参数，代表我们要通过插件实现自动打包功能，只要修改代码保存，他就会自动打包生成</p></blockquote><ul><li>再次运行<code>npm run dev</code>命令，重新进行项目的打包</li><li>在浏览器中访问<code>http://localhost:8080</code>地址，查看自动打包效果</li></ul><p>注意：<code>webpack-dev-server</code>会启动一个<strong>实时打包的http服务器</strong></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;webpack在框架中多半被脚手架所集成，例如vue中的vue-cli，但是在面试中，还是会被问到，所以我们还是要了解一些必要知识，能让我们对此类技术有一个更深的认识。&lt;/p&gt;
&lt;p&gt;不得不说，在学习过程中，我了解到了许多我之前仅仅知道那是配置文件的东西，但是经过学习了解之后，已经可以知道哪些配置是为了什么目的的了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;古人云：学吧，学会了都是你的~&lt;/p&gt;
&lt;p&gt;古人又云：学吧，学不死就往死里学！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;注：本文为摘录笔记，供学习使用。&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="webpack" scheme="https://wangenze267.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>组件库计划，启航！</title>
    <link href="https://wangenze267.github.io/posts/2713460185.html/"/>
    <id>https://wangenze267.github.io/posts/2713460185.html/</id>
    <published>2021-09-11T11:22:39.000Z</published>
    <updated>2021-10-11T05:25:55.664Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在大一下，第一次尝试饿了么团队的element-ui的时候，我就有想过在未来自己尝试参与开发一款属于自己的组件库，但是由于种种原因，就一直没能开始啃这块饼，终于这次开学，开始尝试着自己去做一个组件库，目的有二，一是实现自己当初的梦想，二是能够进一步锻炼自己的能力。</p><p>那么，组件库计划，正式起航！</p><p>在开始之前，去网上找了许多资料，要么是不太详细，要么是讲的太高深导致我看不大懂，挑选了很久，在掘金找到了篇自己觉得对小白很友好的博客，会在文中放给大家，本文是对我开发的组件库的一个简介。</p><span id="more"></span><h3 id="建立项目"><a href="#建立项目" class="headerlink" title="建立项目"></a>建立项目</h3><p>组件库选定为基于Vue开发的组件库，所以我们要建立一个vue项目。</p><p>这里我参考了：<a href="https://juejin.cn/post/6844904085808742407#heading-4">从零到一教你基于vue开发一个组件库 </a></p><p>我是参考这位大佬的博客来进行构建项目目录，并做出了一些修改，修改后我的目录如下：</p><img src="/posts/2713460185.html/目录.png" alt="s" style="zoom:80%;"><p>建立一个style目录，存放所有的样式文件，包括目前的主题样式，单个组件样式，跟以后可能会有的icon样式等，早些抽离出来以方便后期维护。</p><p>建立一个utils目录，存放用到的自己封装的一些工具函数，例如日期，随机数，遍历数组等。</p><h3 id="关于组件"><a href="#关于组件" class="headerlink" title="关于组件"></a>关于组件</h3><p>我们做组件库同平时自己封装项目中的组件是不一样的，做组件库的时候要想的是公共需求，也就是，一个组件库最基本应该具备什么，其次才是你针对于某些业务而做出的优化，这些优化会成为你的特点，然而目前我要做的，仅仅是努力做到基本，我觉得就很好了。</p><p>拿一个简单的button举例子，他应该有哪些<code>type</code>呢？</p><p>我认为：最基本的应该是：<code>default</code>、<code>success</code>、<code>error</code>、<code>warning</code>、<code>primary</code>，分别对应着：默认、成功、失败、警告和主要。</p><blockquote><p>毕竟，日后也是可以在这个基础上进行增加的嘛。</p></blockquote><p>除了<code>type</code>，一个button还应该具有哪些？</p><p>我还写了以下这些，方便开发者能够迅速的开发：</p><ul><li><code>size</code>：default，large，small</li><li><code>width</code>、<code>height</code>、<code>color</code>、<code>background</code>：一些基础的样式</li><li><code>borderColor</code>：最近在网上看那种幽灵按钮很好看，于是也把这个写了进去，但是还没做</li><li><code>disabled</code>：用来做按钮禁用的</li><li><code>handleClick</code>：点击事件</li></ul><p>暂时，这个button组件仅支持这些内容，日后还会更新一些新的type和一些样式的参数方便大家使用。</p><h3 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h3><p>组件库名字暂时定为：<strong>vstu-ui</strong></p><blockquote><p>起名鬼才的我，v：是Vue的组件，stu：学生，代表这个组件库，是由身为学生的我们开发的。</p></blockquote><p>开发者：我和我的三个小学弟</p><blockquote><p>秉持着边开发边学习的理念，提高自己。</p></blockquote><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>这个组件库暂时未发布到npm上，也暂时没有开源到github/gitee上呢，当这个组件库具有一定数量的组件后会同时上传，发布后希望大家给与支持，你们的issue是我们坚持下去的动力！</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在大一下，第一次尝试饿了么团队的element-ui的时候，我就有想过在未来自己尝试参与开发一款属于自己的组件库，但是由于种种原因，就一直没能开始啃这块饼，终于这次开学，开始尝试着自己去做一个组件库，目的有二，一是实现自己当初的梦想，二是能够进一步锻炼自己的能力。&lt;/p&gt;
&lt;p&gt;那么，组件库计划，正式起航！&lt;/p&gt;
&lt;p&gt;在开始之前，去网上找了许多资料，要么是不太详细，要么是讲的太高深导致我看不大懂，挑选了很久，在掘金找到了篇自己觉得对小白很友好的博客，会在文中放给大家，本文是对我开发的组件库的一个简介。&lt;/p&gt;</summary>
    
    
    
    
    <category term="经历" scheme="https://wangenze267.github.io/tags/%E7%BB%8F%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>假期总结（暑假结束！）</title>
    <link href="https://wangenze267.github.io/posts/1009533019.html/"/>
    <id>https://wangenze267.github.io/posts/1009533019.html/</id>
    <published>2021-09-06T06:27:00.000Z</published>
    <updated>2021-10-11T05:24:09.342Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>短暂的暑假就这么结束了，简单做个复盘，看看自己暑假都做了什么。</p><blockquote><p>关于我</p><p>一个在校生（开学大三）</p><p>我的主页：<a href="https://wangez.site/">Ned - 我的主页</a></p><p>简单描述：<a href="https://blog.wangez.site/about/">Ned - 关于我</a></p></blockquote><hr><span id="more"></span><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><p>共计更文十五篇</p><p>从7.16开始： <a href="https://blog.wangez.site/posts/1173819435.html/">JS中，函数原来有这么多种定义方法（暑假开始！）</a></p><p>到9.5号的：<a href="https://blog.wangez.site/posts/3558445990.html/">中秋想赏月却不想出门怎么办 </a></p><p>我的博客：<a href="https://blog.wangez.site/">Ned - Blog</a></p><p>感想：要坚持下去，慢慢的，提高质量，加强深度。</p><hr><h3 id="掘金社区"><a href="#掘金社区" class="headerlink" title="掘金社区"></a>掘金社区</h3><p>参与了三个活动，发布了十余篇文章</p><p>获得了150+点赞，2000+浏览量</p><p>参与活动获得了掘金的升级证书，抱枕，杯子等字节周边</p><p>我的主页：<a href="https://juejin.cn/user/105972016875911/posts">Ned 的个人主页 - - 掘金 </a></p><p>感想：采用参加活动的方式来督促自己更文学习，确实是一种较为不错的方式，但是<strong>八月更文活动</strong>，这种31天连续更文会把作者榨干的，确实肝不动，另外发布自己的理解到社区上，也会有好心的大佬来指点，看自己理解有没有错误之类的（我就很幸运的受到了点拨），也能认识许多有趣的人。</p><hr><h3 id="字节青训营"><a href="#字节青训营" class="headerlink" title="字节青训营"></a>字节青训营</h3><p>参与了字节于暑假举办的青训营活动，听了月影、李松峰等老师所讲解的知识，收获甚多。</p><p>跟认识的小伙伴顺利完成了最终青训营的大作业，仿掘金抽奖。</p><p>了解到这个阶段的前端大佬们都学到了什么程度，自己学习的动力更足了（不比永远不知道自己有多菜）。</p><p>技术栈采用的是：express+vue</p><p>项目地址：<a href="https://github.com/yiyu66/raffle">仿掘金抽奖</a></p><p>感想：第一次采用github参与到多人协作中（之前都是要么在gitee，要么自己一个人做），我们小队都是大三的，交流都十分顺畅，但是人家大三都已经工作了一段时间了，我们学校还不放我走，呜呜呜。</p><hr><h3 id="在线简历App"><a href="#在线简历App" class="headerlink" title="在线简历App"></a>在线简历App</h3><p>做移动应用开发大赛，用uni-app做了个app，第一次自己完全的从头至尾去制作app，踩了很多坑，也修了很多bug。</p><p>前端技术栈：uni-app+uView</p><blockquote><p>连续尝试40+小时未解决的bug</p><p>谁知道用uni-app做的app如何导出pdf？</p><p>Renderjs，在uni-app里返回函数为何频频失效？</p><p>uni-app，操作dom也太费劲了。</p></blockquote><p>感想：在uni-app生态没有再好一点之前，我应该是不太想使用了，属实太累了，网上的资源太少，官方文档的解释也不是很到位，甚至社区都是暂时的解决方案，没有一个良好的解决方案。</p><hr><h3 id="力扣"><a href="#力扣" class="headerlink" title="力扣"></a>力扣</h3><p>坚持了一阵子的力扣刷题，后来发现算法还是太差，于是找了个课，准备补习一下。</p><blockquote><p>课最近在网盘里吃灰</p></blockquote><p>算法一直被我放在后面，但是发现缺少这玩意还真不行。</p><hr><h3 id="牛客"><a href="#牛客" class="headerlink" title="牛客"></a>牛客</h3><p>在牛客上做了几套题，才意识到算法在笔试中的重要性，所以才有了刷力扣，补习算法的一系列操作。</p><ul><li>字节青训营的笔试：有关于前端知识点都是很基础的，但是都是多选，所以有点莫能两可的感觉，觉得自己还是不扎实；第一个算法题在力扣上之前做过，会做，但是牛客的笔试跟之前刷题不一样的地方在于他不给输入输出，所以一下子蒙圈了，没有写出来，第二个算法题就直接死亡了，一点思路没有，后来出来跟小伙伴们语音得知，好像要动态规划，不会。</li><li>做了几套其他企业的前端/技术笔试题：知识点主要集中在计网，算法，操作系统（前端较少，不知道是不是我刷的少），发现自己现在忽略了科班的东西，还是应该重视大学中的基础（要不在学学我就得走社招了？？）。</li></ul><p>之前六七月份在牛客上买了2022届秋招的冲刺课，知识点跟讲解都还不错的，两个小时的视频往往要看好几遍才能懂一丝。到目前为止除了Vue相关还没看之外其他的都看的差不多了。（Vue的不是不看我打算学完B站那个视频回来在看）</p><hr><h3 id="这个假期学习情况"><a href="#这个假期学习情况" class="headerlink" title="这个假期学习情况"></a>这个假期学习情况</h3><p>RN看了一些，心思假期做点东西来着，但是流产了。</p><p>Node重新学了一遍基础（上次看已经是大一的事情了），自己照着教程做了一个网页版的小游戏，能够利用express做一些简单的小接口（但是还要依赖我们万能的搜索引擎）。</p><p>uni-app，暂时拥有了强大的debug能力，对于某些地方的报错有着强烈的记忆能力（折磨死我了），并对于百度上的一些资源有着辨别真假的能力。</p><p>ES6，对于promise async await的封装有一些简单的应用，其他某些方面也能够较为多的应用了一些。</p><p>Vue，看了B站黑马的Vue3，还没看完。</p><p>参加了字节的青训营，学了很多之前没有注意的点跟新知识。</p><hr><h3 id="下学期学习计划？"><a href="#下学期学习计划？" class="headerlink" title="下学期学习计划？"></a>下学期学习计划？</h3><p>Vue3是优先级最高的，其次还是前端基础，让自己更了解的全面一些吧。</p><p>Node的程度暂时我只想学到可以自己做小demo的程度，也就是传说中的简历上写<strong>了解</strong>的程度，暂时就可以了。</p><p>算法的话，每天都要看一点，一个知识点一个知识点去滚（难滚也得滚）。</p><p>计网，在面试前疯狂吸收吧（这玩意应该也属于基础）。</p><blockquote><p>写到这我又想起来了，小马哥的视频也在网盘里吃灰！</p></blockquote><p>害，老吃灰人了！</p><img src="/posts/1009533019.html/happy.webp" style="zoom:50%;"><hr><h3 id="总结完毕"><a href="#总结完毕" class="headerlink" title="总结完毕"></a>总结完毕</h3><blockquote><p> 另：哪位友友有详细的前端校招八股的整理的知识点，可否给一份，最近掘金掘的太苦了。</p></blockquote><p>对了，还要多看书，深入浅出Vue跟红宝书都看一看吧，别吃灰了。</p><p>就酱！上学！</p><img src="/posts/1009533019.html/kaixue.webp" alt="z" style="zoom:60%;">]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;短暂的暑假就这么结束了，简单做个复盘，看看自己暑假都做了什么。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于我&lt;/p&gt;
&lt;p&gt;一个在校生（开学大三）&lt;/p&gt;
&lt;p&gt;我的主页：&lt;a href=&quot;https://wangez.site/&quot;&gt;Ned - 我的主页&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单描述：&lt;a href=&quot;https://blog.wangez.site/about/&quot;&gt;Ned - 关于我&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;</summary>
    
    
    
    
    <category term="经历" scheme="https://wangenze267.github.io/tags/%E7%BB%8F%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>中秋想赏月却不想出门怎么办</title>
    <link href="https://wangenze267.github.io/posts/3558445990.html/"/>
    <id>https://wangenze267.github.io/posts/3558445990.html/</id>
    <published>2021-09-05T09:02:00.000Z</published>
    <updated>2021-10-11T05:25:51.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="中秋想看月亮还不想出门怎么办"><a href="#中秋想看月亮还不想出门怎么办" class="headerlink" title="中秋想看月亮还不想出门怎么办"></a>中秋想看月亮还不想出门怎么办</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>是不是快到中秋节了？</p><p>中秋节，团圆的日子，先祝各位节日快乐，身体健康！</p><p>在吃过团圆饭后，我们是不是还有一个传统的习俗，就是赏月。古时候，人们都住在庭院里，没有现在的高楼大厦，吃完饭在院子里一坐，谈话赏月。</p><blockquote><p> 一壶茶，一家人，岂不快哉~</p></blockquote><p>但是问题来了，现如今我们的生活节奏太快了，楼房遍地都是，很少人有雅兴去能够静下心来去做赏月这回事，很有可能是当天晚上因为出去办事，顺便照个相，发个pyq，赏月结束。</p><p>但是大家放心，我们是谁？伟大的程序员啊，我们当然可以做到，足不出户的赏月~</p><span id="more"></span><h3 id="开始造月"><a href="#开始造月" class="headerlink" title="开始造月"></a>开始造月</h3><p>首先我们先来一个黑色的背景板，当作夜空，在其中放上一个<code>div</code>，接下来造月用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;moon&quot;</span> <span class="attr">title</span>=<span class="string">&quot;这是一个月亮&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来就是为这个<code>div</code>月亮添加样式了，月亮嘛，得是白色，圆的是吧，所以我们添加上这些CSS样式，因为居中好看一些，所以我们在body中添加了样式使得月亮垂直水平居中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.moon</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">8em</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候我们的月亮是这样子的。</p><p><img src="/posts/3558445990.html/moon.png"></p><p>嗯，是一个月亮的样子了，但是我觉得这还不够，一个月亮怎么能够没有光辉呢？加上！光辉这里，我的思路是加上白色的阴影，这样在黑色的衬托下就会显得像有光辉一样。</p><p>所以我们加上这个：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.moon</span>&#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">40px</span> white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/3558445990.html/moonLight.png"></p><p>至此，我们中秋所看见的圆月就造完了，小伙伴们就可以在家赏月了😏，下面再做两个月亮不是圆月的样子。</p><p><img src="/posts/3558445990.html/threeMoon.png"></p><p>总体的代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.moon1</span>,<span class="selector-class">.moon2</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">8em</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.moon1</span>&#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">40px</span> white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.moon2</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.moon2</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">8em</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.moon3</span>&#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">8em</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1.5em</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-color</span>: white;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;moon1&quot; title=&quot;这个是刚刚做的圆月&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;moon2&quot; title=&quot;这个月亮右侧不能设置光辉&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;moon3&quot; title=&quot;这个月亮由边框设置的，不能设置光辉&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="再谈月亮"><a href="#再谈月亮" class="headerlink" title="再谈月亮"></a>再谈月亮</h3><p>有心的小伙子可以看出，第二和第三个月亮的实现方式并不一样。那我们再来说一下他们是如何实现的吧。</p><h4 id="第二个月亮"><a href="#第二个月亮" class="headerlink" title="第二个月亮"></a>第二个月亮</h4><p>我们用两个纸片，用剪刀裁剪成相同大小的圆，把他们重叠在一起，错开位置，这样的形状就是我们想要的了。在css中也是一样的道理，利用伪元素，制造一个相同大小的圆，完后用黑色的圆去遮盖白色圆的右边（利用相对定位）。</p><p>下面再贴一次代码，方便大家看（只贴了css部分）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.moon1</span>,<span class="selector-class">.moon2</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">8em</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.moon2</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.moon2</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">8em</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样的圆的圆弧一侧是没有光辉的，因为那里是遮盖形成的。</p><h4 id="第三个月亮"><a href="#第三个月亮" class="headerlink" title="第三个月亮"></a>第三个月亮</h4><p>第三个月亮我们是用边框来做的。设置元素的左边框的宽度，再设置一个圆角使他变成一个弧形，别忘了把边框的颜色改成白色，这样就好啦。</p><blockquote><p>注意，这个不能设置光辉，也就是阴影哦~ </p><p>要不，要不就露馅啦！</p><p>（加个boder-shadow去试试吧，嘿嘿）</p></blockquote><p>下面也贴一下它的代码，方便观察：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.moon3</span>&#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">8em</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1.5em</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-color</span>: white;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>还是要提前祝大家中秋节快乐呀！月饼🥮🥮🥮🥮🥮，记得吃一块，沾沾节气。</p><p>不出意外的话，这应该是开学前的倒数第二篇啦，开学前应该还有一篇来做一下假期总结的（情感博主再次上线）</p><p><img src="/posts/3558445990.html/holiday.webp"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;中秋想看月亮还不想出门怎么办&quot;&gt;&lt;a href=&quot;#中秋想看月亮还不想出门怎么办&quot; class=&quot;headerlink&quot; title=&quot;中秋想看月亮还不想出门怎么办&quot;&gt;&lt;/a&gt;中秋想看月亮还不想出门怎么办&lt;/h1&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;是不是快到中秋节了？&lt;/p&gt;
&lt;p&gt;中秋节，团圆的日子，先祝各位节日快乐，身体健康！&lt;/p&gt;
&lt;p&gt;在吃过团圆饭后，我们是不是还有一个传统的习俗，就是赏月。古时候，人们都住在庭院里，没有现在的高楼大厦，吃完饭在院子里一坐，谈话赏月。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 一壶茶，一家人，岂不快哉~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是问题来了，现如今我们的生活节奏太快了，楼房遍地都是，很少人有雅兴去能够静下心来去做赏月这回事，很有可能是当天晚上因为出去办事，顺便照个相，发个pyq，赏月结束。&lt;/p&gt;
&lt;p&gt;但是大家放心，我们是谁？伟大的程序员啊，我们当然可以做到，足不出户的赏月~&lt;/p&gt;</summary>
    
    
    
    
    <category term="Css" scheme="https://wangenze267.github.io/tags/Css/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的设计模式-代理模式</title>
    <link href="https://wangenze267.github.io/posts/1278378512.html/"/>
    <id>https://wangenze267.github.io/posts/1278378512.html/</id>
    <published>2021-08-26T05:51:53.468Z</published>
    <updated>2021-10-11T05:22:12.512Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>学学设计模式，每次更一个，实在太多了。</p><p>第一次更新：<strong>单例模式</strong></p><p>第二次更新：<strong>策略模式</strong></p><p>第三次更新：<strong>代理模式</strong></p><blockquote><p>打算10月前将JavaScript滚个百分之六七十，不知道能不能学完。</p><p>计网操作系统数据结构算法还没学</p><p>vue还没盘</p><p>我还有机会吗</p></blockquote><span id="more"></span><h3 id="什么是设计模式？"><a href="#什么是设计模式？" class="headerlink" title="什么是设计模式？"></a>什么是设计模式？</h3><p>在软件设计过程中，针对特定问题的简洁而优雅的解决方案。</p><p>把之前的经验总结并且合理运用到某处场景上，能够解决实际的问题。</p><h3 id="设计模式五大设计原则（SOLID）"><a href="#设计模式五大设计原则（SOLID）" class="headerlink" title="设计模式五大设计原则（SOLID）"></a>设计模式五大设计原则（SOLID）</h3><ul><li><p>S-单一职责原则</p><blockquote><p>即一个程序只做好一件事</p></blockquote></li><li><p>O-开放封闭原则</p><blockquote><p>可扩展开放，对修改封闭</p></blockquote></li><li><p>L-里氏置换原则</p><blockquote><p>子类能覆盖父类，并能出现在父类出现的地方</p></blockquote></li><li><p>I-接口独立原则</p><blockquote><p>保持接口的单一独立</p></blockquote></li><li><p>D-依赖导致原则</p><blockquote><p>使用方法只关注接口而不关注具体类的实现</p></blockquote></li></ul><h3 id="为什么需要设计模式？"><a href="#为什么需要设计模式？" class="headerlink" title="为什么需要设计模式？"></a>为什么需要设计模式？</h3><ul><li><p>易读性</p><blockquote><p>使用设计模式能够提升我们的代码可读性，提升后续开发效率</p></blockquote></li><li><p>可拓展性</p><blockquote><p>使用设计模式对代码解耦，能很好的增强代码的yi修改性和拓展性</p></blockquote></li><li><p>复用性</p><blockquote><p>使用设计模式可以复用已有的解决方案，无需重复相同工作</p></blockquote></li><li><p>可靠性</p><blockquote><p>使用设计模式能够增加系统的健壮性，使代码编写真正工程化</p></blockquote></li></ul><h3 id="常见设计模式"><a href="#常见设计模式" class="headerlink" title="常见设计模式"></a>常见设计模式</h3><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>定义：<strong>唯一&amp;全局访问。保证一个类仅有一个实例，并提供一个访问它的全局访问点。</strong></p><blockquote><p>另外一种多例模式，通过一个类构造出多个不一样的实例，这就是多例模式。</p><p>单例模式与多例模式最本质的区别：实例的数量。</p><p>单例模式永远只有一个实例，这个实例可以被缓存起来，可以复用。</p></blockquote><p>应用场景：就是能被缓存的内容，例如登录弹窗。</p><blockquote><p>我觉得就是一个地方如果在你的项目中可以用到两次或两次以上，都可以尝试一下这个，能够减少很多代码。</p></blockquote><p>来看这段伪代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> creatLoginLayer = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    div.innerHtml = <span class="string">&quot;登录浮窗&quot;</span>;</span><br><span class="line">    div.style.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">    <span class="keyword">return</span> div;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;loginBtn&quot;</span>).onclick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> loginLayer = creatLoginLayer();</span><br><span class="line">    loginLayer.style.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>creatLoginLayer</code>的作用是创建一个登录浮窗并将节点添加到body上，下面做的是登录按钮的一个点击事件，点击登录按钮就会创建登录浮窗并将<code>display</code>从<code>none</code>改为<code>block</code>，将他显示出来。</p><p>这个逻辑是没毛病的，但是我们想一下，每点击一下登录按钮就要执行这些代码，一个项目中如果有很多地方要呢？我们上面这短短几行而已，如果是上百上千甚至上万呢？是不是就非常损耗性能，这个时候，我们的单例模式就派上了用场。</p><p>使用单例模式后：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getSingle = <span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...rest</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result || (result = fn.apply(<span class="built_in">this</span>.rest));</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> creatLoginLayer = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    div.innerHtml = <span class="string">&quot;登录浮窗&quot;</span>;</span><br><span class="line">    div.style.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">    <span class="keyword">return</span> div;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createSingleLoginLayer = getSingle(createLoginLayer);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;loginBtn&quot;</span>).onclick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> loginLayer = createSingleLoginLayer();</span><br><span class="line">    loginLayer.style.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以见到，增加了一个<code>getSingle</code>函数，这里有个闭包的概念，result变量只要一直在引用就不会被销毁，起到了一个缓存的作用，函数的参数是一个<code>function</code>，如果result是null或者undefined就执行后面的逻辑，将这个传进来的函数的返回值也就是这个<code>div</code>赋给result，这样我们下面的函数就执行一次就可以了，下次调用的时候result有值，所以就直接返回了，不会在执行后面的逻辑。</p><h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><p>定义：<strong>定义一系列的算法，把它们一个个的封装起来，并且使它们可以相互转换。把看似毫无联系的代码提取封装、复用，使之更容易被理解和拓展</strong></p><blockquote><p>它就像我们解决问题的思路，有很多种，那我们就应该选择最适合解决当前业务的那一种。</p></blockquote><p>应用场景：要完成一件事情，有不同的策略。例如绩效计算、表单验证规则。</p><p>来看这段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> calculateBonus = <span class="function">(<span class="params">level, salary</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (level) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attr">default</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strategies[level][salary];</span><br><span class="line">&#125;;</span><br><span class="line">calculateBonus[<span class="string">&#x27;s&#x27;</span>,<span class="number">20000</span>];</span><br></pre></td></tr></table></figure><p>函数<code>calculateBonus</code>接收level跟salary两个参数，运用switch case来计算绩效。但是在以后我们又要增加新绩效的时候，例如我们想加一个p绩效，我们要深入到代码中，去在switch case中去增加一个 case p的逻辑，这样子我们相当于每次业务变更都要去改造这个函数，就是不太好的情况。</p><blockquote><p>使用switch还好，代码看起来很清晰，如果是if else呢   不敢想象了~</p></blockquote><p>再看策略模式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> strategies = &#123;</span><br><span class="line">    <span class="attr">s</span>: <span class="function">(<span class="params">salary</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">a</span>: <span class="function">(<span class="params">salary</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">b</span>: <span class="function">(<span class="params">salary</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> caculateBonus = <span class="function">(<span class="params">level, salary</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> strategies[level][salary];</span><br><span class="line">&#125;;</span><br><span class="line">caculateBonus(<span class="string">&#x27;s&#x27;</span>,<span class="number">20000</span>)</span><br></pre></td></tr></table></figure><p>也是有着一个<code>caculateBonus</code>函数，接收level跟salary两个参数，但是我们构建了一个策略表，在策略表中维护这个计算规则。这时候如果要加入一个新绩效等级，就去表中加入一个新等级，再加入它的计算规则即可，并且可以将表提取出来放到另一个文件中，甚至是放到公网上下发，因为这个表是可以不用程序员们来维护的，可以做成页面交给公司其他人员去维护，就有了前面说的那个下发的功能，可以去给别人展示。计算绩效的时候去读取策略表，完后根据表中规则来进行计算就行。</p><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><p>定义：<strong>为一个对象提供一个代用品或者占位符，以便控制对它的访问。替身对象可对请求预先进行处理，再决定是否转交给本体对象。</strong></p><blockquote><p>假如项目中一个图片过大，短时间内加载不出来的时候，用户只能看见白屏，体验感就会非常糟糕，这时候我们就可以用一个替身来暂时替代图片。</p><p>当真身被访问的时候，我们先访问替身对象，让替身代替真身去做一些事情，之后在转交给真身处理。     </p></blockquote><p>应用场景：当我们不方便直接访问某个对象时，或不满足需求时，可考虑使用一个替身对象来控制该对象的访问。</p><p>来看这段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生函数</span></span><br><span class="line"><span class="keyword">const</span> rawImage = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> imgNode = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(imgNode);</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">setSrc</span>:<span class="function">(<span class="params">src</span>)=&gt;</span> &#123;</span><br><span class="line">imgNode.src = <span class="string">&quot;./loading.gif&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = src;</span><br><span class="line">img.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">imgNode.src = <span class="built_in">this</span>.src;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">rawImage.setSrc(<span class="string">&quot;http://xxx.gif&quot;</span>);</span><br></pre></td></tr></table></figure><p>这个xxx.gif的加载时间可能要到10s左右，我们首先预加载了一个loading图，用户看到的过程是最开始看见loading，当xxx加载完成后，也就是onload执行完后，就会做一个替换的效果，完成了这个功能。</p><p>思考：这段代码是不是耦合性太强了啊？</p><p>是的，loading的逻辑跟我们实际加载的逻辑是耦合在一起的，我们要做两个事情，一个是设置loading，一个是设置图片链接。那我们给他分开，用代理函数去做预处理，加载loading，用原生函数提供一个设置图片链接的功能。</p><p>实现一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生函数</span></span><br><span class="line"><span class="keyword">const</span> rawImage = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> imgNode = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(imgNode);</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">setSrc</span>:<span class="function">(<span class="params">src</span>)=&gt;</span> &#123;</span><br><span class="line">imgNode.src = src;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理函数</span></span><br><span class="line"><span class="keyword">const</span> proxyImage = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.onload = <span class="function">() =&gt;</span>&#123;</span><br><span class="line">rawImage.setSrc(<span class="built_in">this</span>.src);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">setSrc</span>:<span class="function">(<span class="params">src</span>) =&gt;</span> &#123;</span><br><span class="line">rawImage.setSrc(<span class="string">&quot;./loading.gif&quot;</span>);</span><br><span class="line">img.src = src;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">proxyImage.setSrc(<span class="string">&quot;http://xxx.gif&quot;</span>);</span><br></pre></td></tr></table></figure><p>我们通常会进行一些请求的预处理的时候使用代理模式。</p><h4 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h4><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><h4 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h4><h4 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h4><h4 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h4>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;学学设计模式，每次更一个，实在太多了。&lt;/p&gt;
&lt;p&gt;第一次更新：&lt;strong&gt;单例模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第二次更新：&lt;strong&gt;策略模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第三次更新：&lt;strong&gt;代理模式&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;打算10月前将JavaScript滚个百分之六七十，不知道能不能学完。&lt;/p&gt;
&lt;p&gt;计网操作系统数据结构算法还没学&lt;/p&gt;
&lt;p&gt;vue还没盘&lt;/p&gt;
&lt;p&gt;我还有机会吗&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="JavaScript" scheme="https://wangenze267.github.io/tags/JavaScript/"/>
    
    <category term="设计模式" scheme="https://wangenze267.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
